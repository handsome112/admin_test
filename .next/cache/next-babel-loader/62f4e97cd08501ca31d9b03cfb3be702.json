{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/banner/upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, createRef } from 'react';\nimport { message } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { bannerService } from '@services/banner.service';\nimport { BreadcrumbComponent } from '@components/common';\nimport { FormUploadBanner } from '@components/banner/form-upload-banner';\nimport Router from 'next/router';\n\nclass UploadBanner extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      uploading: false,\n      uploadPercentage: 0\n    });\n\n    _defineProperty(this, \"formRef\", void 0);\n\n    _defineProperty(this, \"_banner\", void 0);\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  componentDidMount() {\n    if (!this.formRef) this.formRef = createRef();\n  }\n\n  onUploading(resp) {\n    this.setState({\n      uploadPercentage: resp.percentage\n    });\n  }\n\n  setFormVal(field, val) {\n    const instance = this.formRef.current;\n    instance.setFieldsValue({\n      [field]: val\n    });\n  }\n\n  beforeUpload(file) {\n    this._banner = file;\n    return false;\n  }\n\n  async submit(data) {\n    if (data.type == 'img' && !this._banner) {\n      return message.error('Please select banner!');\n    }\n\n    await this.setState({\n      uploading: true\n    });\n\n    try {\n      if (data.type == 'img') {\n        await bannerService.uploadBanner(this._banner, data, this.onUploading.bind(this));\n      } else if (data.type == 'html') {\n        await bannerService.create(data);\n      }\n\n      message.success('Banner has been uploaded'); // TODO - process for response data?\n\n      await this.setState({\n        uploading: false\n      }, () => window.setTimeout(() => {\n        Router.push({\n          pathname: '/banner'\n        }, '/banner');\n      }, 1000));\n    } catch (error) {\n      message.error('An error occurred, please try again!');\n      await this.setState({\n        uploading: false\n      });\n    }\n\n    return undefined;\n  }\n\n  render() {\n    if (!this.formRef) this.formRef = createRef();\n    const {\n      uploading,\n      uploadPercentage\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"Upload banner\")), __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Banners',\n        href: '/banner'\n      }, {\n        title: 'Upload new banner'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(FormUploadBanner, {\n      submit: this.submit.bind(this),\n      beforeUpload: this.beforeUpload.bind(this),\n      uploading: uploading,\n      uploadPercentage: uploadPercentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default UploadBanner;","map":null,"metadata":{},"sourceType":"module"}