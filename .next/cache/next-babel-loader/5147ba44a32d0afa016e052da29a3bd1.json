{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { updateCurrentUser, updateUserSuccess, setUpdating, updateCurrentUserAvatar, setReducer, setUpdateStatus } from './actions';\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/user.png',\n    name: '',\n    email: ''\n  },\n  updating: false,\n  updateSuccess: false\n};\nconst userReducers = [{\n  on: updateCurrentUser,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n\n}, {\n  on: updateCurrentUserAvatar,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        avatar: data.payload\n      })\n    });\n  }\n\n}, {\n  on: updateUserSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updatedUser: data.payload\n    });\n  }\n\n}, {\n  on: setUpdating,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updating: data.payload\n    });\n  }\n\n}, {\n  on: setUpdateStatus,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: data.payload\n    });\n  }\n\n}, {\n  on: setReducer,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      [data.payload.field]: data.payload.data\n    });\n  }\n\n}];\nexport default merge({}, createReducers('user', [userReducers], initialState));","map":null,"metadata":{},"sourceType":"module"}