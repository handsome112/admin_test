{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/admin.dtest.live/src/components/user/avatar-upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\n\nfunction getBase64(img, callback) {\n  var reader = new FileReader();\n  reader.addEventListener('load', function () {\n    return callback(reader.result);\n  });\n  reader.readAsDataURL(img);\n} // function beforeUpload(file) {\n//   const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n//   if (!isJpgOrPng) {\n//     message.error('You can only upload JPG/PNG file!');\n//   }\n//   const isLt2M = file.size / 1024 / 1024 < 2;\n//   if (!isLt2M) {\n//     message.error('Image must smaller than 2MB!');\n//   }\n//   return isJpgOrPng && isLt2M;\n// }\n\n\nexport var AvatarUpload = /*#__PURE__*/function (_PureComponent) {\n  _inherits(AvatarUpload, _PureComponent);\n\n  var _super = _createSuper(AvatarUpload);\n\n  function AvatarUpload() {\n    var _this;\n\n    _classCallCheck(this, AvatarUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: false,\n      imageUrl: _this.props.imageUrl\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (info) {\n      if (info.file.status === 'uploading') {\n        _this.setState({\n          loading: true\n        });\n\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, function (imageUrl) {\n          _this.setState({\n            imageUrl: imageUrl,\n            loading: false\n          });\n\n          _this.props.onUploaded && _this.props.onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(AvatarUpload, [{\n    key: \"beforeUpload\",\n    value: function beforeUpload(file) {\n      var _this2 = this;\n\n      var ext = file.name.split('.').pop().toLowerCase();\n      var isImageAccept = process.env.NEXT_PUBLIC_IMAGE_ACCPET.split(',').map(function (item) {\n        return item.trim();\n      }).indexOf(\".\".concat(ext));\n\n      if (isImageAccept === -1) {\n        message.error(\"You can only upload \".concat(process.env.NEXT_PUBLIC_IMAGE_ACCPET, \" file!\"));\n      }\n\n      var isLt2M = file.size / 1024 / 1024 < (process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2);\n\n      if (!isLt2M) {\n        message.error(\"Image must smaller than \".concat(process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB!\"));\n      }\n\n      if (this.props.uploadNow) {\n        return isImageAccept > -1 && isLt2M;\n      }\n\n      if (isImageAccept > -1 && isLt2M) {\n        this.props.beforeUpload && this.props.beforeUpload(file);\n        getBase64(file, function (imageUrl) {\n          _this2.setState({\n            imageUrl: imageUrl\n          });\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var uploadButton = __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }\n      }, this.state.loading ? __jsx(LoadingOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 31\n        }\n      }) : __jsx(PlusOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 53\n        }\n      }), __jsx(\"div\", {\n        className: \"ant-upload-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, \"Upload\"));\n\n      var imageUrl = this.state.imageUrl;\n      var _this$props = this.props,\n          headers = _this$props.headers,\n          uploadUrl = _this$props.uploadUrl;\n      return __jsx(Upload, {\n        name: \"avatar\",\n        listType: \"picture-card\",\n        className: \"avatar-uploader\",\n        showUploadList: false,\n        action: uploadUrl,\n        beforeUpload: this.beforeUpload.bind(this),\n        onChange: this.handleChange,\n        headers: headers,\n        accept: process.env.NEXT_PUBLIC_IMAGE_ACCPET || 'image/*',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, imageUrl ? __jsx(\"img\", {\n        src: imageUrl,\n        alt: \"avatar\",\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }) : uploadButton);\n    }\n  }]);\n\n  return AvatarUpload;\n}(PureComponent);","map":null,"metadata":{},"sourceType":"module"}