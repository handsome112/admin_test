{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { updateUser, setUpdating, setUpdateStatus, updateCurrentUser } from './actions';\nimport { userService } from '@services/index';\nconst userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield userService.updateMe(data.payload);\n      yield put(updateCurrentUser(updated.data));\n      yield put(setUpdateStatus(true)); // if this is current user, reload user info?\n    } catch (e) {// TODO - alert error\n    } finally {\n      yield put(setUpdateStatus(false));\n      yield put(setUpdating(false));\n    }\n  }\n\n}];\nexport default flatten([createSagas(userSagas)]);","map":null,"metadata":{},"sourceType":"module"}