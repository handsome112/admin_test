{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/admin.dtest.live/src/components/performer/AccountForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent, createRef } from 'react';\nimport { Form, Input, Button, Select, Switch, message } from 'antd';\nimport { AvatarUpload } from '@components/user/avatar-upload';\nimport { authService, performerService } from '@services/index';\nvar layout = {\n  labelCol: {\n    lg: {\n      span: 4\n    },\n    sm: {\n      span: 10\n    }\n  },\n  wrapperCol: {\n    lg: {\n      span: 16\n    },\n    sm: {\n      span: 10\n    }\n  }\n};\nvar validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nexport var AccountForm = /*#__PURE__*/function (_PureComponent) {\n  _inherits(AccountForm, _PureComponent);\n\n  var _super = _createSuper(AccountForm);\n\n  function AccountForm() {\n    var _this;\n\n    _classCallCheck(this, AccountForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"formRef\", createRef());\n\n    return _this;\n  }\n\n  _createClass(AccountForm, [{\n    key: \"formRefSubmit\",\n    value: function formRefSubmit() {\n      this.formRef.current.submit();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          performer = _this$props.performer,\n          onFinish = _this$props.onFinish,\n          submiting = _this$props.submiting,\n          countries = _this$props.countries,\n          languages = _this$props.languages,\n          categories = _this$props.categories,\n          onUploaded = _this$props.onUploaded,\n          studios = _this$props.studios;\n      var uploadHeaders = {\n        authorization: authService.getToken()\n      };\n      return __jsx(Form, _extends({\n        ref: this.formRef\n      }, layout, {\n        name: \"form-performer\",\n        onFinish: onFinish.bind(this),\n        onFinishFailed: function onFinishFailed() {\n          return message.error('Please complete the required fields in tab general info');\n        },\n        validateMessages: validateMessages,\n        initialValues: performer ? performer : {\n          country: 'US',\n          status: 'active',\n          gender: 'male',\n          languages: ['en'],\n          emailVerified: false,\n          socials: {\n            facebook: 'facebook.com',\n            twitter: 'twitter.com',\n            instagram: 'instagram.com'\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }), __jsx(Form.Item, {\n        name: \"firstName\",\n        label: \"First name\",\n        rules: [{\n          required: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"lastName\",\n        label: \"Last name\",\n        rules: [{\n          required: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"gender\",\n        label: \"Gender\",\n        rules: [{\n          required: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, __jsx(Select, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, __jsx(Select.Option, {\n        key: \"male\",\n        value: \"male\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }, \"Male\"), __jsx(Select.Option, {\n        key: \"female\",\n        value: \"female\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }\n      }, \"Female\"), __jsx(Select.Option, {\n        key: \"transgender\",\n        value: \"transgender\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      }, \"Transgender\"))), __jsx(Form.Item, {\n        name: \"username\",\n        label: \"Username\",\n        rules: [{\n          required: true\n        }, {\n          min: 3\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        placeholder: \"Unique, lowercase and number, no space or special chars\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"email\",\n        label: \"Email\",\n        rules: [{\n          type: 'email',\n          required: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"phone\",\n        label: \"Phone Number\",\n        rules: [{\n          min: 9\n        }, {\n          max: 14\n        }, {\n          pattern: /^[0-9\\b\\+ ]+$/,\n          message: 'The phone number is not in the correct format'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      })), categories && categories.length > 0 && __jsx(Form.Item, {\n        name: \"categoryIds\",\n        label: \"Categories\",\n        rules: [{\n          type: 'array'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      }, __jsx(Select, {\n        mode: \"multiple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, categories.map(function (cat) {\n        return __jsx(Select.Option, {\n          key: cat.slug,\n          value: cat._id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }\n        }, cat.name);\n      }))), studios && studios.length > 0 && __jsx(Form.Item, {\n        name: \"studioId\",\n        label: \"Studio\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }\n      }, __jsx(Select, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }, studios.map(function (s) {\n        return __jsx(Select.Option, {\n          key: s._id,\n          value: s._id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }\n        }, s.name);\n      }))), !performer && [__jsx(Form.Item, {\n        key: \"password\",\n        name: \"password\",\n        label: \"Password\",\n        rules: [{\n          required: true\n        }, {\n          min: 6\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, __jsx(Input.Password, {\n        placeholder: \"Performer password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Item, {\n        key: \"rePassword\",\n        name: \"rePassword\",\n        label: \"Confirm password\",\n        rules: [{\n          required: true\n        }, {\n          min: 6\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }, __jsx(Input.Password, {\n        placeholder: \"Confirm performer password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }\n      }))], __jsx(Form.Item, {\n        name: \"country\",\n        label: \"Country\",\n        rules: [{\n          required: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }\n      }, __jsx(Select, {\n        showSearch: true,\n        filterOption: function filterOption(input, option) {\n          return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }\n      }, countries && countries.map(function (country) {\n        return __jsx(Select.Option, {\n          key: country.code,\n          value: country.code,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }\n        }, country.name);\n      }))), __jsx(Form.Item, {\n        name: \"city\",\n        label: \"City\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        placeholder: \"Enter the city\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"state\",\n        label: \"State\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        placeholder: \"Enter the state\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"address\",\n        label: \"Address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        placeholder: \"Enter the address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"zipcode\",\n        label: \"Zipcode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        placeholder: \"Enter the zipcode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"languages\",\n        label: \"Languages\",\n        rules: [{\n          type: 'array'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }\n      }, __jsx(Select, {\n        mode: \"multiple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }\n      }, languages && languages.map(function (l) {\n        return __jsx(Select.Option, {\n          key: l.code,\n          value: l.code,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }\n        }, l.name);\n      }))), __jsx(Form.Item, {\n        name: \"status\",\n        label: \"Status\",\n        rules: [{\n          required: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      }, __jsx(Select, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }\n      }, __jsx(Select.Option, {\n        key: \"active\",\n        value: \"active\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }\n      }, \"Active\"), __jsx(Select.Option, {\n        key: \"inactive\",\n        value: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }\n      }, \"Inactive\"))), __jsx(Form.Item, {\n        name: \"emailVerified\",\n        label: \"Verified Email\",\n        valuePropName: \"checked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 9\n        }\n      }, __jsx(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        label: \"Avatar\",\n        help: \"Image must smaller than \".concat(process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB! Only accept \").concat(process.env.NEXT_PUBLIC_IMAGE_ACCPET, \".\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 9\n        }\n      }, __jsx(AvatarUpload, {\n        imageUrl: performer && performer.avatar ? performer.avatar : '',\n        uploadUrl: performerService.getAvatarUploadUrl(),\n        headers: uploadHeaders,\n        onUploaded: onUploaded.bind(this, 'avatarId'),\n        uploadNow: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n          offset: 4\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }\n      }, __jsx(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: submiting,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }\n      }, \"Submit\")));\n    }\n  }]);\n\n  return AccountForm;\n}(PureComponent);","map":null,"metadata":{},"sourceType":"module"}