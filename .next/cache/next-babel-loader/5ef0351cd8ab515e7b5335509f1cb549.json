{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/payment-information/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Modal, message, Descriptions } from 'antd';\nimport Head from 'next/head';\nimport { PureComponent } from 'react';\nimport { SearchFilter } from '@components/common/search-filter';\nimport { BreadcrumbComponent } from '@components/common';\nimport Page from '@components/common/layout/page';\nimport { getResponseError } from 'src/lib/utils';\nimport { TableListPaymentInformation } from '@components/payment/table-list-payment-information';\nimport { paymentService } from 'src/services';\nimport { omit } from 'lodash';\nconst {\n  Item\n} = Descriptions;\nconst invisibleField = ['_id', '__v', 'sourceType', 'sourceInfo', 'sourceId', 'type', 'createdAt', 'updatedAt'];\n\nclass PaymentInformationPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      modalVisible: false,\n      data: [],\n      info: null,\n      offset: 0,\n      pagination: {\n        total: 0,\n        pageSize: 10\n      },\n      sort: {\n        sortBy: 'createAt',\n        sorter: 'desc'\n      },\n      filter: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getList();\n  }\n\n  componentDidUpdate(_, prevState) {\n    const {\n      sort,\n      filter,\n      offset\n    } = this.state;\n\n    if (filter !== prevState.filter || sort !== prevState.sort || offset !== prevState.offset) {\n      this.getList();\n    }\n  }\n\n  async getList() {\n    const {\n      filter,\n      offset,\n      pagination,\n      sort\n    } = this.state;\n\n    try {\n      this.setState({\n        loading: true\n      });\n      const resp = await paymentService.paymentInformationSearch(_objectSpread(_objectSpread(_objectSpread({}, filter), sort), {}, {\n        offset,\n        limit: pagination.pageSize\n      }));\n      this.setState({\n        data: resp.data.data,\n        pagination: _objectSpread(_objectSpread({}, pagination), {}, {\n          total: resp.data.total\n        })\n      });\n    } catch (e) {\n      this.showError(e);\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  async showError(e) {\n    const err = await Promise.resolve(e);\n    message.error(getResponseError(err));\n  }\n\n  async onHandleTabChange(pagination, filters, sorter) {\n    const {\n      sort\n    } = this.state;\n\n    if (filters && filters.length) {}\n\n    this.setState({\n      offset: (pagination.current - 1) * this.state.pagination.pageSize,\n      sort: _objectSpread(_objectSpread({}, sort), {}, {\n        sortBy: sorter.field,\n        sorter: sorter.order === 'ascend' ? 'asc' : 'desc'\n      })\n    });\n  }\n\n  async handleFilter({\n    performerId,\n    studioId\n  }) {\n    if (performerId) {\n      this.setState({\n        filter: {\n          sourceId: performerId,\n          sourceType: 'performer'\n        }\n      });\n    } else if (studioId) {\n      this.setState({\n        filter: {\n          sourceId: studioId,\n          sourceType: 'studio'\n        }\n      });\n    } else {\n      this.setState({\n        filter: {}\n      });\n    }\n  }\n\n  async showDetailPaymentInformation(id) {\n    try {\n      const {\n        info\n      } = this.state;\n\n      if (info && info._id === id) {\n        this.setState({\n          modalVisible: true\n        });\n        return;\n      }\n\n      const resp = await paymentService.detail(id);\n      this.setState({\n        info: resp.data,\n        modalVisible: true\n      });\n    } catch (e) {\n      this.showError(e);\n    }\n  }\n\n  render() {\n    const {\n      data,\n      loading,\n      pagination,\n      modalVisible,\n      info\n    } = this.state;\n\n    const modalContent = __jsx(Descriptions, {\n      column: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 26\n      }\n    }, (info === null || info === void 0 ? void 0 : info.sourceInfo) && __jsx(Item, {\n      label: \"Username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 28\n      }\n    }, info.sourceInfo.username), info && Object.keys(omit(info, invisibleField)).map(field => __jsx(Item, {\n      label: field,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 69\n      }\n    }, info[field])));\n\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, \"Payment Information\")), __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Payment Information'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, __jsx(SearchFilter, {\n      notWithKeyWord: true,\n      searchWithPerformer: true,\n      searchWithStudio: true,\n      onSubmit: this.handleFilter.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }), data ? __jsx(TableListPaymentInformation, {\n      dataSource: data,\n      loading: loading,\n      rowKey: \"_id\",\n      pagination: pagination,\n      onChange: this.onHandleTabChange.bind(this),\n      onViewDeital: this.showDetailPaymentInformation.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }) : __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, \"No data found.\"), __jsx(Modal, {\n      width: 900,\n      visible: modalVisible,\n      onCancel: () => this.setState({\n        modalVisible: false\n      }),\n      okButtonProps: {\n        hidden: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, modalContent)));\n  }\n\n}\n\nexport default PaymentInformationPage;","map":null,"metadata":{},"sourceType":"module"}