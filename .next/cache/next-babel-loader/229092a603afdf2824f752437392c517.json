{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport cookie from 'js-cookie';\nimport { isUrl } from '@lib/string';\nexport var TOKEN = 'token';\nexport var APIRequest = /*#__PURE__*/function () {\n  function APIRequest() {\n    _classCallCheck(this, APIRequest);\n\n    _defineProperty(this, \"token\", null);\n  }\n\n  _createClass(APIRequest, [{\n    key: \"setAuthHeaderToken\",\n    value: function setAuthHeaderToken(token) {\n      this.token = token;\n    }\n    /**\n     * Parses the JSON returned by a network request\n     *\n     * @param  {object} response A response from a network request\n     *\n     * @return {object}          The parsed JSON from the request\n     */\n\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(response) {\n      if (response.status === 204 || response.status === 205) {\n        return null;\n      }\n\n      return response.json();\n    }\n    /**\n     * Checks if a network request came back fine, and throws an error if not\n     *\n     * @param  {object} response   A response from a network request\n     *\n     * @return {object|undefined} Returns either the response, or throws an error\n     */\n\n  }, {\n    key: \"checkStatus\",\n    value: function checkStatus(response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      if (response.status === 401) {\n        if (true) {\n          Router.push('/login');\n        }\n\n        throw new Error('Forbidden in the action!');\n      } // const error = new Error(response.statusText) as any;\n      // error.response = response;\n      // throw error;\n\n\n      throw response.clone().json();\n    }\n  }, {\n    key: \"request\",\n    value: function request(url, method, body, headers) {\n      var verb = (method || 'get').toUpperCase();\n      var updatedHeader = Object.assign({\n        'Content-Type': 'application/json',\n        // TODO - check me\n        Authorization: this.token || (true ? localStorage.getItem(TOKEN) : '')\n      }, headers || {});\n      return fetch(isUrl(url) ? url : \"\".concat(process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url), {\n        method: verb,\n        headers: updatedHeader,\n        body: body ? JSON.stringify(body) : null\n      }).then(this.checkStatus).then(this.parseJSON);\n    }\n  }, {\n    key: \"buildUrl\",\n    value: function buildUrl(baseUrl, params) {\n      if (!params) {\n        return baseUrl;\n      }\n\n      var queryString = Object.keys(params).map(function (k) {\n        return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);\n      }).join('&');\n      return \"\".concat(baseUrl, \"?\").concat(queryString);\n    }\n  }, {\n    key: \"get\",\n    value: function get(url, headers) {\n      return this.request(url, 'get', null, headers);\n    }\n  }, {\n    key: \"post\",\n    value: function post(url, data, headers) {\n      return this.request(url, 'post', data, headers);\n    }\n  }, {\n    key: \"put\",\n    value: function put(url, data, headers) {\n      return this.request(url, 'put', data, headers);\n    }\n  }, {\n    key: \"del\",\n    value: function del(url, data, headers) {\n      return this.request(url, 'delete', data, headers);\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(url, files) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {},\n        method: 'POST'\n      };\n      var uploadUrl = isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url);\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData();\n        files.forEach(function (f) {\n          return formData.append(f.fieldname, f.file, f.file.name);\n        });\n        options.customData && Object.keys(options.customData).forEach(function (fieldname) {\n          return typeof options.customData[fieldname] !== 'undefined' && formData.append(fieldname, options.customData[fieldname]);\n        });\n        req.responseType = 'json';\n        req.open(options.method || 'POST', uploadUrl);\n        var token = cookie.get(TOKEN);\n\n        if (!token) {\n          token = true ? localStorage.getItem(TOKEN) : '';\n        }\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }]);\n\n  return APIRequest;\n}();","map":null,"metadata":{},"sourceType":"module"}