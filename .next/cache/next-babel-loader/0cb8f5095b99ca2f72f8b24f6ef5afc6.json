{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/users/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { PureComponent, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, message, Dropdown, Button, Menu, Tag } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { userService } from '@services/index';\nimport { SearchFilter } from '@components/user/search-filter';\nimport { DownOutlined, EditOutlined } from '@ant-design/icons';\nimport { formatDate, convertMiliSecsToSecs } from '@lib/date';\nimport { downloadCsv } from '@lib/utils';\n\nclass Users extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      pagination: {},\n      searching: false,\n      list: [],\n      limit: 10,\n      filter: {},\n      sortBy: 'updatedAt',\n      sort: 'desc'\n    });\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  componentDidMount() {\n    this.search();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      this.search();\n    }\n  }\n\n  async search(page = 1) {\n    try {\n      const {\n        status\n      } = this.props;\n      let {\n        filter\n      } = this.state;\n      this.setState({\n        searching: true\n      });\n\n      if (status) {\n        filter.status = status;\n      } else {\n        delete filter.status;\n      }\n\n      const query = _objectSpread(_objectSpread({}, filter), {}, {\n        limit: this.state.limit,\n        offset: (page - 1) * this.state.limit,\n        sort: this.state.sort,\n        sortBy: this.state.sortBy\n      });\n\n      const resp = await userService.search(query);\n      this.setState({\n        filter,\n        searching: false,\n        list: resp.data.data,\n        pagination: _objectSpread(_objectSpread({}, this.state.pagination), {}, {\n          total: resp.data.total\n        })\n      });\n    } catch (e) {\n      message.error('An error occurred, please try again!');\n      this.setState({\n        searching: false\n      });\n    }\n  }\n\n  async handleTableChange(pagination, filters, sorter) {\n    const pager = _objectSpread({}, this.state.pagination);\n\n    pager.current = pagination.current;\n    await this.setState({\n      pagination: pager,\n      sortBy: sorter.field || 'updatedAt',\n      sort: sorter.order ? sorter.order === 'descend' ? 'desc' : 'asc' : 'desc'\n    });\n    this.search(pager.current);\n  }\n\n  async handleFilter(filter) {\n    await this.setState({\n      filter\n    });\n    this.search();\n  }\n\n  async onExportCsv(filter) {\n    try {\n      const page = 1;\n      await this.setState({\n        filter\n      });\n      const url = userService.exportCsv(_objectSpread(_objectSpread({\n        limit: this.state.limit,\n        offset: (page - 1) * this.state.limit\n      }, this.state.filter), {}, {\n        sort: this.state.sort,\n        sortBy: this.state.sortBy\n      }));\n      const resp = await downloadCsv(url, 'users_export.csv');\n\n      if (resp && resp.success) {\n        return message.success('Downloading, please check in Download folder');\n      }\n    } catch (error) {\n      return message.error('An error occurred, please try again!');\n    }\n  }\n\n  render() {\n    const {\n      list,\n      searching,\n      pagination\n    } = this.state;\n    const columns = [{\n      title: 'First name',\n      dataIndex: 'firstName',\n      sorter: true,\n      fixed: 'left'\n    }, {\n      title: 'Last name',\n      dataIndex: 'lastName',\n      sorter: true,\n      fixed: 'left'\n    }, {\n      title: 'Username',\n      dataIndex: 'username',\n      sorter: true\n    }, {\n      title: 'Email',\n      dataIndex: 'email',\n      sorter: true\n    }, {\n      title: 'Roles',\n      dataIndex: 'roles',\n\n      render(roles, record) {\n        return __jsx(React.Fragment, null, roles.map(role => {\n          switch (role) {\n            case 'admin':\n              return __jsx(Tag, {\n                color: \"red\",\n                key: `admin-${record._id}`,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 37\n                }\n              }, role);\n\n            case 'user':\n              return __jsx(Tag, {\n                color: \"geekblue\",\n                key: record._id,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 36\n                }\n              }, role);\n\n            default:\n              return __jsx(Tag, {\n                color: \"default\",\n                key: record._id,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 31\n                }\n              }, role);\n          }\n        }));\n      }\n\n    }, {\n      title: 'Gender',\n      dataIndex: 'gender'\n    }, {\n      title: 'Amount spent',\n      dataIndex: '_id',\n\n      render(_, record) {\n        var _record$stats;\n\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 18\n          }\n        }, record === null || record === void 0 ? void 0 : (_record$stats = record.stats) === null || _record$stats === void 0 ? void 0 : _record$stats.totalTokenSpent);\n      }\n\n    }, {\n      title: 'Balance',\n      dataIndex: 'balance',\n      sorter: true\n    }, {\n      title: 'Email Verified',\n      dataIndex: 'emailVerified',\n\n      render(emailVerified) {\n        switch (emailVerified) {\n          case true:\n            return __jsx(Tag, {\n              color: \"green\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 22\n              }\n            }, \"Y\");\n\n          case false:\n            return __jsx(Tag, {\n              color: \"red\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 22\n              }\n            }, \"N\");\n        }\n\n        return __jsx(Tag, {\n          color: \"default\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 18\n          }\n        }, emailVerified);\n      }\n\n    }, {\n      title: 'Status',\n      dataIndex: 'status',\n\n      render(status) {\n        switch (status) {\n          case 'active':\n            return __jsx(Tag, {\n              color: \"green\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 22\n              }\n            }, \"Active\");\n\n          case 'inactive':\n            return __jsx(Tag, {\n              color: \"red\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 22\n              }\n            }, \"Inactive\");\n\n          case 'pending-email-confirmation':\n            return __jsx(Tag, {\n              color: \"default\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 22\n              }\n            }, \"Pending\");\n        }\n\n        return __jsx(Tag, {\n          color: \"default\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 18\n          }\n        }, status);\n      }\n\n    }, {\n      title: 'Total view stream time (HH:mm:ss)',\n      dataIndex: '_id',\n\n      render(data, record) {\n        var _record$stats2, _record$stats3;\n\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }\n        }, (record === null || record === void 0 ? void 0 : (_record$stats2 = record.stats) === null || _record$stats2 === void 0 ? void 0 : _record$stats2.totalViewTime) && convertMiliSecsToSecs((record === null || record === void 0 ? void 0 : (_record$stats3 = record.stats) === null || _record$stats3 === void 0 ? void 0 : _record$stats3.totalViewTime) || 0));\n      }\n\n    }, {\n      title: 'Total online time (HH:mm)',\n      dataIndex: 'totalOnlineTime',\n\n      render(time) {\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 18\n          }\n        }, convertMiliSecsToSecs(time || 0));\n      }\n\n    }, {\n      title: 'CreatedAt',\n      dataIndex: 'createdAt',\n      sorter: true,\n\n      render(date) {\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 18\n          }\n        }, formatDate(date));\n      }\n\n    }, {\n      title: 'Actions',\n      dataIndex: '_id',\n      fixed: 'right',\n\n      render(id) {\n        return __jsx(Dropdown, {\n          overlay: __jsx(Menu, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }\n          }, __jsx(Menu.Item, {\n            key: \"edit\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 19\n            }\n          }, __jsx(Link, {\n            href: {\n              pathname: '/users/update',\n              query: {\n                id\n              }\n            },\n            as: `/users/update?id=${id}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 21\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 23\n            }\n          }, __jsx(EditOutlined, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 25\n            }\n          }), \" Update\")))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }\n        }, \"Actions \", __jsx(DownOutlined, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 25\n          }\n        })));\n      }\n\n    }];\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }\n    }, \"Users\")), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }\n    }, __jsx(SearchFilter, {\n      onSubmit: this.handleFilter.bind(this),\n      onExportCsv: this.onExportCsv.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }), __jsx(Table, {\n      dataSource: list,\n      columns: columns,\n      rowKey: \"_id\",\n      loading: searching,\n      pagination: pagination,\n      onChange: this.handleTableChange.bind(this),\n      scroll: {\n        x: 1500,\n        y: 650\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStates = state => ({\n  currentUser: state.user.current\n});\n\nexport default connect(mapStates)(Users);","map":null,"metadata":{},"sourceType":"module"}