{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/users/create.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment } from 'react';\nimport { message } from 'antd';\nimport Page from '@components/common/layout/page';\nimport Router from 'next/router';\nimport { authService, userService } from '@services/index';\nimport { utilsService } from '@services/utils.service';\nimport { validateUsername, getResponseError } from '@lib/utils';\nimport { AccountForm } from '@components/user/account-form';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\n\nclass UserCreate extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      pwUpdating: false,\n      creating: false,\n      fetching: false,\n      user: {}\n    });\n\n    _defineProperty(this, \"_avatar\", void 0);\n  }\n\n  static async getInitialProps() {\n    const resp = await utilsService.countriesList();\n    return {\n      countries: resp.data\n    };\n  }\n\n  async submit(data) {\n    try {\n      if (data.password !== data.rePassword) {\n        return message.error('Confirm password mismatch!');\n      }\n\n      if (!validateUsername(data.username)) {\n        return message.error('Username is invalid!');\n      }\n\n      this.setState({\n        creating: true\n      });\n      const resp = await userService.create(data);\n      message.success('Updated successfully');\n\n      if (this._avatar) {\n        await userService.uploadAvatarUser(this._avatar, resp.data._id);\n      }\n\n      Router.push(`/users/update?id=${resp.data._id}`);\n    } catch (e) {\n      const err = (await Promise.resolve(e)) || {};\n      message.error(getResponseError(err) || 'An error occurred, please try again!');\n    } finally {\n      this.setState({\n        creating: false\n      });\n    }\n  }\n\n  onBeforeUpload(file) {\n    this._avatar = file;\n  }\n\n  render() {\n    const {\n      creating\n    } = this.state;\n    const {\n      countries\n    } = this.props;\n    const uploadHeaders = {\n      authorization: authService.getToken()\n    };\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, \"Create user\")), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, __jsx(AccountForm, {\n      onFinish: this.submit.bind(this),\n      updating: creating,\n      options: {\n        beforeUpload: this.onBeforeUpload.bind(this)\n      },\n      countries: countries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default UserCreate;","map":null,"metadata":{},"sourceType":"module"}