{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/common/layout/menu.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent, Fragment } from \"react\";\nimport { Menu } from \"antd\";\nimport Link from \"next/link\";\nimport Router from 'next/router';\nexport class SiderMenu extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      selectedKeys: ['dashboard'],\n      openKeys: []\n    });\n\n    _defineProperty(this, \"onOpenChange\", openKeys => {\n      const {\n        menus\n      } = this.props;\n      const rootSubmenuKeys = menus.filter(_ => !_.menuParentId).map(_ => _.id);\n      const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);\n      let newOpenKeys = openKeys;\n\n      if (rootSubmenuKeys.indexOf(latestOpenKey) !== -1) {\n        newOpenKeys = latestOpenKey ? [latestOpenKey] : [];\n      }\n\n      this.setState({\n        openKeys: newOpenKeys\n      });\n    });\n\n    _defineProperty(this, \"generateMenus\", data => {\n      return data.map(item => {\n        if (item.children) {\n          return __jsx(Menu.SubMenu, {\n            key: item.id,\n            title: __jsx(Fragment, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 15\n              }\n            }, item.icon, __jsx(\"span\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 17\n              }\n            }, item.name)),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 11\n            }\n          }, this.generateMenus(item.children));\n        }\n\n        return __jsx(Menu.Item, {\n          key: item.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 9\n          }\n        }, item.icon, __jsx(Link, {\n          href: item.route,\n          as: item.as || item.route,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }\n        }, __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }\n        }, item.name)));\n      });\n    });\n  }\n\n  componentDidMount() {\n    // Router.events.on('routeChangeStart', this.routerChange.bind(this));\n    const openKeys = this.getOpenKeys(this.props.menus);\n    this.setState({\n      openKeys\n    });\n  }\n\n  flatten(menus, flattenMenus = []) {\n    menus.forEach(m => {\n      if (m.children) {\n        this.flatten(m.children, flattenMenus);\n      }\n\n      const tmp = _objectSpread({}, m);\n\n      delete tmp.children;\n      flattenMenus.push(tmp);\n    });\n    return flattenMenus;\n  }\n\n  getOpenKeys(menus) {\n    const pathname = false ? Router.pathname : '';\n    const withoutQuery = pathname.split('?')[0];\n    let found = false;\n    let results = []; // TODO - optimize me if needed or more level\n\n    menus.forEach(menu => {\n      if (found) return;\n      const menuRoute = menu.route ? menu.route.split('?')[0] : '';\n\n      if (menu.route === pathname || menuRoute === withoutQuery) {\n        found = true;\n        results = [menu.id];\n        return;\n      }\n\n      if (menu.children) {\n        menu.children.forEach(cmenu => {\n          if (found) return;\n          const menuRoute = cmenu.route ? cmenu.route.split('?')[0] : '';\n\n          if (cmenu.route === pathname || menuRoute === withoutQuery) {\n            found = true;\n            results = [menu.id];\n            return;\n          }\n        });\n      }\n    });\n    return results;\n  }\n\n  render() {\n    const {\n      theme,\n      menus,\n      collapsed\n    } = this.props;\n    const menuProps = collapsed ? {} : {\n      openKeys: this.state.openKeys\n    };\n    return __jsx(Menu, _extends({\n      mode: \"inline\",\n      theme: theme // selectedKeys={this.state.selectedKeys}\n      ,\n      openKeys: this.state.openKeys,\n      onOpenChange: this.onOpenChange.bind(this) // onClick={\n      //   isMobile\n      //     ? () => {\n      //         onCollapseChange(true);\n      //       }\n      //     : undefined\n      // }\n\n    }, menuProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }), this.generateMenus(menus));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}