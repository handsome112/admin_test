{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/video/upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment } from 'react';\nimport { message } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { videoService } from '@services/video.service';\nimport Router from 'next/router';\nimport { BreadcrumbComponent } from '@components/common';\nimport { FormUploadVideo } from '@components/video/form-upload-video';\n\nclass UploadVideo extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      uploading: false,\n      preview: null,\n      uploadPercentage: 0\n    });\n\n    _defineProperty(this, \"_files\", {\n      thumbnail: null,\n      video: null\n    });\n  }\n\n  beforeUpload(file, field) {\n    this._files[field] = file;\n  }\n\n  onUploading(resp) {\n    this.setState({\n      uploadPercentage: resp.percentage\n    });\n  }\n\n  async submit(data) {\n    if (!this._files['video']) {\n      return message.error('Please select video!');\n    }\n\n    const files = Object.keys(this._files).reduce((files, key) => {\n      if (this._files[key]) {\n        files.push({\n          fieldname: key,\n          file: this._files[key] || null\n        });\n      }\n\n      return files;\n    }, []);\n    await this.setState({\n      uploading: true\n    });\n\n    try {\n      const resp = await videoService.uploadVideo(files, data, this.onUploading.bind(this));\n      message.success('Video has been uploaded'); // TODO - process for response data?\n\n      await this.setState({\n        uploading: false\n      }, () => window.setTimeout(() => {\n        Router.push({\n          pathname: '/video/update',\n          query: {\n            id: resp.data._id\n          }\n        }, `/video/update?id=${resp.data._id}`, {\n          shallow: true\n        });\n      }, 1000));\n    } catch (error) {\n      message.error('An error occurred, please try again!');\n      await this.setState({\n        uploading: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      uploading,\n      uploadPercentage\n    } = this.state;\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"Upload video\")), __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Video',\n        href: '/video'\n      }, {\n        title: 'Upload new video'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, __jsx(FormUploadVideo, {\n      submit: this.submit.bind(this),\n      beforeUpload: this.beforeUpload.bind(this),\n      uploading: uploading,\n      uploadPercentage: uploadPercentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default UploadVideo;","map":null,"metadata":{},"sourceType":"module"}