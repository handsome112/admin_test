{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/user/avatar-upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n} // function beforeUpload(file) {\n//   const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n//   if (!isJpgOrPng) {\n//     message.error('You can only upload JPG/PNG file!');\n//   }\n//   const isLt2M = file.size / 1024 / 1024 < 2;\n//   if (!isLt2M) {\n//     message.error('Image must smaller than 2MB!');\n//   }\n//   return isJpgOrPng && isLt2M;\n// }\n\n\nexport class AvatarUpload extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false,\n      imageUrl: this.props.imageUrl\n    });\n\n    _defineProperty(this, \"handleChange\", info => {\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, imageUrl => {\n          this.setState({\n            imageUrl,\n            loading: false\n          });\n          this.props.onUploaded && this.props.onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n        });\n      }\n    });\n  }\n\n  beforeUpload(file) {\n    const ext = file.name.split('.').pop().toLowerCase();\n    const isImageAccept = process.env.NEXT_PUBLIC_IMAGE_ACCPET.split(',').map(item => item.trim()).indexOf(`.${ext}`);\n\n    if (isImageAccept === -1) {\n      message.error(`You can only upload ${process.env.NEXT_PUBLIC_IMAGE_ACCPET} file!`);\n    }\n\n    const isLt2M = file.size / 1024 / 1024 < (process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2);\n\n    if (!isLt2M) {\n      message.error(`Image must smaller than ${process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2}MB!`);\n    }\n\n    if (this.props.uploadNow) {\n      return isImageAccept > -1 && isLt2M;\n    }\n\n    if (isImageAccept > -1 && isLt2M) {\n      this.props.beforeUpload && this.props.beforeUpload(file);\n      getBase64(file, imageUrl => {\n        this.setState({\n          imageUrl\n        });\n      });\n    }\n\n    return false;\n  }\n\n  render() {\n    const uploadButton = __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, this.state.loading ? __jsx(LoadingOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 31\n      }\n    }) : __jsx(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 53\n      }\n    }), __jsx(\"div\", {\n      className: \"ant-upload-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"Upload\"));\n\n    const {\n      imageUrl\n    } = this.state;\n    const {\n      headers,\n      uploadUrl\n    } = this.props;\n    return __jsx(Upload, {\n      name: \"avatar\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: uploadUrl,\n      beforeUpload: this.beforeUpload.bind(this),\n      onChange: this.handleChange,\n      headers: headers,\n      accept: process.env.NEXT_PUBLIC_IMAGE_ACCPET || 'image/*',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, imageUrl ? __jsx(\"img\", {\n      src: imageUrl,\n      alt: \"avatar\",\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }) : uploadButton);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}