{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from \"lodash\";\nimport { put } from \"redux-saga/effects\";\nimport { createSagas } from \"@lib/redux\";\nimport Router from 'next/router';\nimport { login, loginSuccess, logout, loginFail, logoutSuccess } from \"./actions\";\nimport { updateCurrentUser } from '../user/actions';\nimport { authService, userService } from \"src/services\";\nimport { resetAppState } from '@redux/actions';\nimport { message } from \"antd\";\nvar authSagas = [{\n  on: login,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, userResp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            payload = data.payload;\n            _context.next = 4;\n            return authService.login(payload);\n\n          case 4:\n            resp = _context.sent.data;\n            _context.next = 7;\n            return authService.setToken(resp.token);\n\n          case 7:\n            _context.next = 9;\n            return userService.me();\n\n          case 9:\n            userResp = _context.sent.data;\n\n            if (userResp.roles.includes('admin')) {\n              _context.next = 15;\n              break;\n            }\n\n            message.error('You don\\'t have permission to access this page');\n            _context.next = 14;\n            return logout();\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            _context.next = 17;\n            return put(updateCurrentUser(userResp));\n\n          case 17:\n            _context.next = 19;\n            return put(loginSuccess());\n\n          case 19:\n            Router.push('/dashboard');\n            _context.next = 29;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 26;\n            return Promise.resolve(_context.t0);\n\n          case 26:\n            error = _context.sent;\n            _context.next = 29;\n            return put(loginFail(error));\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 22]]);\n  })\n}, {\n  on: logout,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return authService.removeToken();\n\n          case 3:\n            _context2.next = 5;\n            return put(logoutSuccess());\n\n          case 5:\n            _context2.next = 7;\n            return put(resetAppState());\n\n          case 7:\n            // TODO - should use a better way?\n            Router.push('/auth/login');\n            _context2.next = 12;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten(createSagas(authSagas));","map":null,"metadata":{},"sourceType":"module"}