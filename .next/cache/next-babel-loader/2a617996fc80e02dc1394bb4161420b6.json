{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport cookie from 'js-cookie';\nimport { APIRequest, TOKEN } from \"./api-request\";\nexport var AuthService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(AuthService, _APIRequest);\n\n  var _super = _createSuper(AuthService);\n\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.post('/auth/users/login', data));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  }, {\n    key: \"setToken\",\n    value: function setToken(token) {\n      true && localStorage.setItem(TOKEN, token); // https://github.com/js-cookie/js-cookie\n      // since Safari does not support, need a better solution\n\n      cookie.set(TOKEN, token);\n      this.setAuthHeaderToken(token);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var token = cookie.get(TOKEN);\n\n      if (token) {\n        return token;\n      }\n\n      return !token && true ? localStorage.getItem(TOKEN) : null;\n    }\n  }, {\n    key: \"removeToken\",\n    value: function removeToken() {\n      cookie.remove(TOKEN);\n      true && localStorage.removeItem(TOKEN);\n    }\n  }, {\n    key: \"updatePassword\",\n    value: function updatePassword(password, userId, source) {\n      var url = userId ? '/auth/users/password' : '/auth/users/me/password';\n      return this.put(url, {\n        userId: userId,\n        password: password,\n        source: source\n      });\n    }\n  }, {\n    key: \"forgotPassword\",\n    value: function forgotPassword(email, type) {\n      var data = {\n        email: email,\n        type: type\n      };\n      return this.post('/auth/users/forgot', data);\n    }\n  }]);\n\n  return AuthService;\n}(APIRequest);\nexport var authService = new AuthService();","map":null,"metadata":{},"sourceType":"module"}