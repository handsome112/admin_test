{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport cookie from 'js-cookie';\nimport { isUrl } from '@lib/string';\nexport const TOKEN = 'token';\nexport class APIRequest {\n  constructor() {\n    _defineProperty(this, \"token\", null);\n  }\n\n  setAuthHeaderToken(token) {\n    this.token = token;\n  }\n  /**\n   * Parses the JSON returned by a network request\n   *\n   * @param  {object} response A response from a network request\n   *\n   * @return {object}          The parsed JSON from the request\n   */\n\n\n  parseJSON(response) {\n    if (response.status === 204 || response.status === 205) {\n      return null;\n    }\n\n    return response.json();\n  }\n  /**\n   * Checks if a network request came back fine, and throws an error if not\n   *\n   * @param  {object} response   A response from a network request\n   *\n   * @return {object|undefined} Returns either the response, or throws an error\n   */\n\n\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    if (response.status === 401) {\n      if (false) {\n        Router.push('/login');\n      }\n\n      throw new Error('Forbidden in the action!');\n    } // const error = new Error(response.statusText) as any;\n    // error.response = response;\n    // throw error;\n\n\n    throw response.clone().json();\n  }\n\n  request(url, method, body, headers) {\n    const verb = (method || 'get').toUpperCase();\n    const updatedHeader = Object.assign({\n      'Content-Type': 'application/json',\n      // TODO - check me\n      Authorization: this.token || (false ? localStorage.getItem(TOKEN) : '')\n    }, headers || {});\n    return fetch(isUrl(url) ? url : `${process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\n      method: verb,\n      headers: updatedHeader,\n      body: body ? JSON.stringify(body) : null\n    }).then(this.checkStatus).then(this.parseJSON);\n  }\n\n  buildUrl(baseUrl, params) {\n    if (!params) {\n      return baseUrl;\n    }\n\n    const queryString = Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');\n    return `${baseUrl}?${queryString}`;\n  }\n\n  get(url, headers) {\n    return this.request(url, 'get', null, headers);\n  }\n\n  post(url, data, headers) {\n    return this.request(url, 'post', data, headers);\n  }\n\n  put(url, data, headers) {\n    return this.request(url, 'put', data, headers);\n  }\n\n  del(url, data, headers) {\n    return this.request(url, 'delete', data, headers);\n  }\n\n  upload(url, files, options = {\n    onProgress: function () {},\n    method: 'POST'\n  }) {\n    const uploadUrl = isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`;\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const response = req.response;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData();\n      files.forEach(f => formData.append(f.fieldname, f.file, f.file.name));\n      options.customData && Object.keys(options.customData).forEach(fieldname => typeof options.customData[fieldname] !== 'undefined' && formData.append(fieldname, options.customData[fieldname]));\n      req.responseType = 'json';\n      req.open(options.method || 'POST', uploadUrl);\n      let token = cookie.get(TOKEN);\n\n      if (!token) {\n        token = false ? localStorage.getItem(TOKEN) : '';\n      }\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}