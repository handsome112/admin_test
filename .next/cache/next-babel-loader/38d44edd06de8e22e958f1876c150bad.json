{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/studios/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { PureComponent, Fragment } from 'react';\nimport { Table, message, Dropdown, Button, Menu, Tag } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { studioService } from '@services/index';\nimport { DownOutlined, EditOutlined } from '@ant-design/icons';\nimport { formatDate } from '@lib/date';\n\nclass Studios extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      pagination: {},\n      searching: false,\n      list: [],\n      limit: 10,\n      filter: {},\n      sortBy: 'updatedAt',\n      sort: 'desc'\n    });\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    return _objectSpread({}, ctx.query);\n  }\n\n  componentDidMount() {\n    this.search();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      status\n    } = this.props;\n\n    if (status !== prevProps.status) {\n      this.search();\n    }\n  }\n\n  async search(page = 1) {\n    try {\n      this.setState({\n        searching: true\n      });\n      let {\n        filter\n      } = this.state;\n      const {\n        status\n      } = this.props;\n\n      if (status) {\n        filter.status = status;\n      } else {\n        delete filter.status;\n      }\n\n      const query = _objectSpread(_objectSpread({\n        limit: this.state.limit,\n        offset: (page - 1) * this.state.limit\n      }, filter), {}, {\n        sort: this.state.sort,\n        sortBy: this.state.sortBy\n      });\n\n      const resp = await studioService.search(query);\n      this.setState({\n        filter,\n        searching: false,\n        list: resp.data.data,\n        pagination: _objectSpread(_objectSpread({}, this.state.pagination), {}, {\n          pageSize: this.state.limit,\n          total: resp.data.total\n        })\n      });\n    } catch (e) {\n      message.error('An error occurred, please try again!');\n      this.setState({\n        searching: false\n      });\n    }\n  }\n\n  async handleTableChange(pagination, filters, sorter) {\n    const pager = _objectSpread({}, this.state.pagination);\n\n    pager.current = pagination.current;\n    await this.setState({\n      pagination: pager,\n      sortBy: sorter.field || 'updatedAt',\n      sort: sorter.order ? sorter.order === 'descend' ? 'desc' : 'asc' : 'desc'\n    });\n    this.search(pager.current);\n  }\n\n  async handleFilter(filter) {\n    await this.setState({\n      filter\n    });\n    this.search();\n  }\n\n  render() {\n    const {\n      list,\n      searching,\n      pagination\n    } = this.state;\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      sorter: true,\n      fixed: 'left'\n    }, {\n      title: 'Username',\n      dataIndex: 'username',\n      sorter: true,\n      fixed: 'left'\n    }, {\n      title: 'Email',\n      dataIndex: 'email',\n      sorter: true\n    }, {\n      title: 'Total Models',\n      key: 'totalModels',\n      render: ({\n        _id,\n        stats\n      }) => __jsx(Link, {\n        href: '/performer?studioId=' + _id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, \"View \", stats.totalPerformer, \" model(s)\"))\n    }, {\n      title: 'Status',\n      dataIndex: 'status',\n\n      render(status) {\n        switch (status) {\n          case 'active':\n            return __jsx(Tag, {\n              color: \"green\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 22\n              }\n            }, \"Active\");\n\n          case 'inactive':\n            return __jsx(Tag, {\n              color: \"red\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 22\n              }\n            }, \"Suspend\");\n\n          case 'pending-email-confirmation':\n            return __jsx(Tag, {\n              color: \"default\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 22\n              }\n            }, \"Pending\");\n        }\n\n        return __jsx(Tag, {\n          color: \"default\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 18\n          }\n        }, status);\n      }\n\n    }, {\n      title: 'Email Verified',\n      dataIndex: 'emailVerified',\n\n      render(emailVerified) {\n        switch (emailVerified) {\n          case true:\n            return __jsx(Tag, {\n              color: \"green\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 22\n              }\n            }, \"Yes\");\n\n          case false:\n            return __jsx(Tag, {\n              color: \"red\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 22\n              }\n            }, \"No\");\n        }\n      }\n\n    }, {\n      title: 'Balance',\n      dataIndex: 'balance',\n      key: 'balance',\n      render: balance => balance.toFixed(2),\n      sorter: true\n    }, {\n      title: 'CreatedAt',\n      dataIndex: 'createdAt',\n      sorter: true,\n\n      render(date) {\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 18\n          }\n        }, formatDate(date));\n      }\n\n    }, {\n      title: 'Actions',\n      dataIndex: '_id',\n      fixed: 'right',\n\n      render(id) {\n        return __jsx(Dropdown, {\n          overlay: __jsx(Menu, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }\n          }, __jsx(Menu.Item, {\n            key: \"edit\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }\n          }, __jsx(Link, {\n            href: {\n              pathname: '/studios/update',\n              query: {\n                id\n              }\n            },\n            as: `/studios/update?id=${id}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 23\n            }\n          }, __jsx(EditOutlined, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 25\n            }\n          }), \" Update\")))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }\n        }, \"Actions \", __jsx(DownOutlined, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }\n        })));\n      }\n\n    }];\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }\n    }, \"Studios\")), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    }), __jsx(Table, {\n      dataSource: list,\n      columns: columns,\n      rowKey: \"_id\",\n      loading: searching,\n      pagination: pagination,\n      onChange: this.handleTableChange.bind(this),\n      scroll: {\n        x: 700,\n        y: 650\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Studios;","map":null,"metadata":{},"sourceType":"module"}