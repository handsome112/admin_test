{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/payment/table-list-payment.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { PureComponent } from 'react';\nimport { Table, Tag } from 'antd';\nimport { formatDate } from '@lib/date';\nexport class TableListPaymentTransaction extends PureComponent {\n  render() {\n    const columns = [{\n      title: 'Transaction ID',\n      dataIndex: '_id',\n      key: 'user',\n\n      render(_id) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }\n        }, _id.slice(16, 24).toUpperCase());\n      }\n\n    }, {\n      title: 'Buyer',\n      dataIndex: 'buyerInfo',\n      key: 'buyerId',\n\n      render(buyerInfo) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }\n        }, buyerInfo === null || buyerInfo === void 0 ? void 0 : buyerInfo.username, __jsx(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }\n        }), buyerInfo === null || buyerInfo === void 0 ? void 0 : buyerInfo.email);\n      }\n\n    }, {\n      title: 'Description',\n\n      render(data, record) {\n        return record.products.map((re, index) => __jsx(\"p\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }\n        }, __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }\n        }, re.name), \" \", __jsx(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 38\n          }\n        }), __jsx(\"small\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }\n        }, re.description)));\n      }\n\n    }, {\n      title: 'Payment gateway',\n      dataIndex: 'paymentGateway',\n      sorter: true,\n\n      render(data, record) {\n        return __jsx(Tag, {\n          color: \"orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 18\n          }\n        }, record.paymentGateway);\n      }\n\n    }, {\n      title: 'Original price',\n      dataIndex: 'originalPrice',\n      sorter: true,\n\n      render(data, record) {\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }\n        }, \"$\", record.originalPrice && record.originalPrice.toFixed(2) || record.totalPrice.toFixed(2));\n      }\n\n    }, {\n      title: 'End Price',\n      dataIndex: 'totalPrice',\n      sorter: true,\n\n      render(data, record) {\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }\n        }, \"$\", record.totalPrice && record.totalPrice.toFixed(2));\n      }\n\n    }, {\n      title: 'Discount',\n      dataIndex: 'couponInfo',\n      sorter: true,\n\n      render(data, record) {\n        return record.couponInfo ? __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }\n        }, `${record.couponInfo.value * 100}%`, \" - $\", (record.originalPrice * record.couponInfo.value).toFixed(2)) : '';\n      }\n\n    }, {\n      title: 'Type',\n      dataIndex: 'type',\n      sorter: true,\n\n      render(type) {\n        return __jsx(Tag, {\n          color: \"orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 18\n          }\n        }, type);\n      }\n\n    }, {\n      title: 'Payment status',\n      dataIndex: 'status',\n      sorter: true,\n\n      render(status) {\n        switch (status) {\n          case 'pending':\n            return __jsx(Tag, {\n              color: \"orange\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 22\n              }\n            }, \"Pending\");\n\n          case 'success':\n            return __jsx(Tag, {\n              color: \"green\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 22\n              }\n            }, \"Success\");\n\n          case 'cancel':\n            return __jsx(Tag, {\n              color: \"red\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 22\n              }\n            }, \"Cancel\");\n\n          default:\n            return __jsx(Tag, {\n              color: \"red\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 22\n              }\n            }, \"Pending\");\n        }\n      }\n\n    }, {\n      title: 'Last update',\n      dataIndex: 'updatedAt',\n      sorter: true,\n      fixed: 'right',\n\n      render(date) {\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 18\n          }\n        }, formatDate(date));\n      }\n\n    }];\n    const {\n      dataSource,\n      rowKey,\n      loading,\n      pagination,\n      onChange\n    } = this.props;\n    return __jsx(Table, {\n      dataSource: dataSource,\n      columns: columns,\n      rowKey: rowKey,\n      loading: loading,\n      pagination: pagination,\n      onChange: onChange.bind(this),\n      scroll: {\n        x: 700,\n        y: 650\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}