{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/photo/form-upload-photo.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent, createRef, Fragment } from 'react';\nimport { Form, Input, Select, Upload, Button, message, Progress } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { SelectPerformerDropdown } from '@components/performer/common/select-performer-dropdown';\nimport { ThumbnailPhoto } from '@components/photo/thumbnail-photo';\nimport { SelectGalleryDropdown } from '@components/gallery/common/select-gallery-dropdown';\nimport { galleryService } from '@services/gallery.service';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!'\n};\nexport class FormUploadPhoto extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      preview: null,\n      galleries: []\n    });\n\n    _defineProperty(this, \"formRef\", void 0);\n  }\n\n  componentDidMount() {\n    if (!this.formRef) this.formRef = createRef();\n    const {\n      photo\n    } = this.props;\n    const pId = photo && photo.performerId || this.props.performerId || '';\n\n    if (pId) {\n      this.findGalleries(pId);\n    }\n  }\n\n  async findGalleries(performerId) {\n    const resp = await galleryService.search({\n      performerId: performerId,\n      limit: 1000\n    });\n    this.setState({\n      galleries: resp.data.data || []\n    });\n  }\n\n  setFormVal(field, val) {\n    const instance = this.formRef.current;\n    instance.setFieldsValue({\n      [field]: val\n    });\n\n    if (field === 'performerId') {\n      this.findGalleries(val);\n    }\n  }\n\n  beforeUpload(file) {\n    const ext = file.name.split('.').pop().toLowerCase();\n    const isImageAccept = process.env.NEXT_PUBLIC_IMAGE_ACCPET.split(',').map(item => item.trim()).indexOf(`.${ext}`);\n\n    if (isImageAccept === -1) {\n      message.error(`You can only upload ${process.env.NEXT_PUBLIC_IMAGE_ACCPET} file!`);\n      return false;\n    }\n\n    const isLt2M = file.size / 1024 / 1024 < (process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2);\n\n    if (!isLt2M) {\n      message.error(`Image must smaller than ${process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2}MB!`);\n      return false;\n    }\n\n    const reader = new FileReader();\n    reader.addEventListener('load', () => this.setState({\n      preview: reader.result\n    }));\n    reader.readAsDataURL(file);\n    this.props.beforeUpload(file);\n    return false;\n  }\n\n  render() {\n    if (!this.formRef) this.formRef = createRef();\n    const {\n      photo,\n      submit,\n      uploading,\n      uploadPercentage,\n      galleryId\n    } = this.props;\n    const {\n      preview\n    } = this.state;\n    const havePhoto = photo ? true : false;\n    return __jsx(Form, _extends({}, layout, {\n      onFinish: submit && submit.bind(this),\n      onFinishFailed: () => message.error('Please complete the required fields'),\n      name: \"form-upload\",\n      ref: this.formRef,\n      validateMessages: validateMessages,\n      initialValues: photo ? photo : {\n        title: '',\n        description: '',\n        status: 'draft',\n        performerId: this.props.performerId || '',\n        galleryId: this.props.galleryId || ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }), __jsx(Form.Item, {\n      name: \"performerId\",\n      label: \"Performer\",\n      rules: [{\n        required: true\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, __jsx(SelectPerformerDropdown, {\n      disabled: havePhoto,\n      defaultValue: photo && photo.performerId || this.props.performerId || '',\n      onSelect: val => this.setFormVal('performerId', val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"galleryId\",\n      label: \"Gallery\",\n      rules: [{\n        required: true,\n        message: 'Please select a gallery'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, __jsx(SelectGalleryDropdown, {\n      galleries: this.state.galleries,\n      disabled: this.state.galleries.length <= 0,\n      defaultValue: photo && photo.galleryId ? photo.galleryId : galleryId ? galleryId : null,\n      onSelect: val => this.setFormVal('galleryId', val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"title\",\n      rules: [{\n        required: true,\n        message: 'Please input title of photo!'\n      }],\n      label: \"Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      placeholder: \"Enter photo title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"description\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, __jsx(Input.TextArea, {\n      rows: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"status\",\n      label: \"Status\",\n      rules: [{\n        required: true,\n        message: 'Please select status!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, __jsx(Select.Option, {\n      value: \"draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, \"Draft\"), __jsx(Select.Option, {\n      key: \"active\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, \"Active\"), __jsx(Select.Option, {\n      key: \"inactive\",\n      value: \"inactive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, \"Inactive\"))), __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      key: \"thumbnail\",\n      className: \"ant-row ant-form-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"ant-col ant-col-4 ant-form-item-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, \"Photo\")), __jsx(\"div\", {\n      className: \"ant-col ant-col-16 ant-form-item-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, !havePhoto ? __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, __jsx(Upload, {\n      accept: process.env.NEXT_PUBLIC_IMAGE_ACCPET || 'image/*',\n      multiple: false,\n      showUploadList: false,\n      disabled: uploading || havePhoto,\n      beforeUpload: file => this.beforeUpload(file),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }\n    }, preview ? __jsx(\"img\", {\n      src: preview,\n      alt: \"file\",\n      style: {\n        width: '250px',\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 23\n      }\n    }) : null, __jsx(\"div\", {\n      style: {\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }), !havePhoto && __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 23\n      }\n    }, __jsx(UploadOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }), \" Select File\")), uploadPercentage ? __jsx(Progress, {\n      percent: uploadPercentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }) : null) : __jsx(ThumbnailPhoto, {\n      photo: photo,\n      style: {\n        width: '250px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"ant-form-item-explain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }\n    }, \"Image must smaller than \", process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB! Only accept \", process.env.NEXT_PUBLIC_IMAGE_ACCPET, \".\"))))), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: uploading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, havePhoto ? 'Update' : 'Upload')));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}