{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { updateUser, setUpdating, setUpdateStatus, updateCurrentUser } from './actions';\nimport { userService } from '@services/index';\nvar userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(setUpdating(true));\n\n          case 3:\n            _context.next = 5;\n            return userService.updateMe(data.payload);\n\n          case 5:\n            updated = _context.sent;\n            _context.next = 8;\n            return put(updateCurrentUser(updated.data));\n\n          case 8:\n            _context.next = 10;\n            return put(setUpdateStatus(true));\n\n          case 10:\n            _context.next = 14;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 14:\n            _context.prev = 14;\n            _context.next = 17;\n            return put(setUpdateStatus(false));\n\n          case 17:\n            _context.next = 19;\n            return put(setUpdating(false));\n\n          case 19:\n            return _context.finish(14);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 12, 14, 20]]);\n  })\n}];\nexport default flatten([createSagas(userSagas)]);","map":null,"metadata":{},"sourceType":"module"}