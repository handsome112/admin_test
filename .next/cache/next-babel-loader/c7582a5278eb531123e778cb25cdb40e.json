{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport BaseLayout from '@layouts/base-layout';\nimport { authService, userService } from '@services/index';\nimport Router from 'next/router';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport { settingService } from '@services/setting.service';\nimport Head from 'next/head';\nimport '../style/index.less';\nimport { updateSettings } from '@redux/settings/actions';\n\nfunction redirectLogin(ctx) {\n  if (false) {\n    authService.removeToken();\n    return Router.push('/auth/login');\n  } // fix for production build\n\n\n  ctx.res.clearCookie && ctx.res.clearCookie('token');\n  ctx.res.writeHead && ctx.res.writeHead(302, {\n    Location: '/auth/login'\n  });\n  ctx.res.end && ctx.res.end();\n}\n\nasync function updateSettingsStore(ctx, settings) {\n  try {\n    const {\n      store\n    } = ctx;\n    store.dispatch(updateUIValue({\n      logo: settings.logoUrl,\n      siteName: settings.siteName\n    }));\n    store.dispatch(updateSettings(settings)); // TODO - update others like meta data\n  } catch (e) {\n    // TODO - implement me\n    console.log(e);\n  }\n}\n\nasync function auth(ctx) {\n  try {\n    const {\n      store\n    } = ctx;\n    const state = store.getState();\n\n    if (state.auth && state.auth.loggedIn) {\n      return;\n    } // TODO - move to a service\n\n\n    const {\n      token\n    } = nextCookie(ctx);\n\n    if (!token) {\n      // log out and redirect to login page\n      // TODO - reset app state?\n      return redirectLogin(ctx);\n    }\n\n    authService.setAuthHeaderToken(token);\n    const user = await userService.me({\n      Authorization: token\n    }); // TODO - check permission\n\n    if (user.data && !user.data.roles.includes('admin')) {\n      return redirectLogin(ctx);\n    }\n\n    store.dispatch(loginSuccess());\n    store.dispatch(updateCurrentUser(user.data));\n  } catch (e) {\n    return redirectLogin(ctx);\n  }\n}\n\nclass Application extends App {\n  // TODO - consider if we need to use get static props in children component instead?\n  // or check in render?\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    // won't check auth for un-authenticated page such as login, register\n    // use static field in the component\n    if (Component.authenticate !== false) {\n      await auth(ctx);\n    }\n\n    let settings = {};\n\n    if (!false) {\n      try {\n        const resp = await settingService.public(); // TODO encrypt, decypt header script, footer script or other info if needed\n\n        settings = resp.data;\n        if (settings) await updateSettingsStore(ctx, settings);\n      } catch (e) {\n        console.log(await e);\n      }\n    }\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps({\n        ctx\n      });\n    }\n\n    return {\n      settings,\n      pageProps,\n      layout: Component.layout\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store,\n      settings\n    } = this.props;\n    const layout = Component.layout;\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, __jsx(\"link\", {\n      rel: \"icon\",\n      href: settings && settings.favicon,\n      sizes: \"64x64\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    })), __jsx(BaseLayout, {\n      layout: layout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nexport default withReduxSaga(Application);","map":null,"metadata":{},"sourceType":"module"}