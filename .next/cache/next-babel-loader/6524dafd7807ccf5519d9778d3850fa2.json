{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/payout-request/detail.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout, message, Select, Button, PageHeader, Row, Col, Input, Descriptions } from 'antd';\nimport Head from 'next/head';\nimport { PureComponent } from 'react';\nimport { BreadcrumbComponent } from '@components/common/breadcrumb';\nimport Page from '@components/common/layout/page';\nimport { payoutRequestService } from 'src/services';\nimport Router from 'next/router';\nimport { getResponseError } from '@lib/utils';\nimport { formatDate } from 'src/lib/date';\nimport { omit } from 'lodash';\nconst {\n  Content\n} = Layout;\nconst {\n  Item\n} = Descriptions;\nconst invisibleField = ['_id', '__v', 'sourceType', 'sourceId', 'sourceInfo', 'type', 'createdAt', 'updatedAt'];\n\nclass PayoutDetailPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitting: false,\n      request: null,\n      loading: true,\n      isUpdating: true,\n      status: '',\n      adminNote: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  async getData() {\n    try {\n      const resp = await payoutRequestService.findById(this.props.id);\n      await this.setState({\n        request: resp.data,\n        status: resp.data.status,\n        adminNote: resp.data.adminNote\n      });\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  async onUpdate(id) {\n    const {\n      status,\n      adminNote,\n      request\n    } = this.state;\n\n    try {\n      await payoutRequestService.update(id, {\n        status: this.state.status,\n        adminNote: this.state.adminNote\n      });\n      message.success('Updated successfully');\n\n      if (request.sourceType === 'studio') {\n        Router.push('/payout-request/studios');\n      }\n\n      if (request.sourceType === 'performer') {\n        Router.push('/payout-request');\n      }\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n    }\n  }\n\n  render() {\n    var _request$performerInf;\n\n    const {\n      request,\n      adminNote\n    } = this.state;\n    const paymentInfo = [];\n\n    if (request) {\n      const {\n        paymentAccountInfo\n      } = request;\n      paymentAccountInfo && Object.keys(omit(paymentAccountInfo, invisibleField)).forEach(field => {\n        paymentInfo.push(__jsx(Item, {\n          label: field,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }\n        }, paymentAccountInfo[field]));\n      });\n    }\n\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"Request Details\")), __jsx(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"main-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Payout Requests',\n        href: '/payout-request'\n      }, {\n        title: (request === null || request === void 0 ? void 0 : request._id) || 'Request Details'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }), request ? __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, __jsx(PageHeader, {\n      title: \"Payout Request Informations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, __jsx(Col, {\n      md: 24,\n      lg: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 23\n      }\n    }, \"Requester:\", ' ', __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, (_request$performerInf = request.performerInfo) === null || _request$performerInf === void 0 ? void 0 : _request$performerInf.username)), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 23\n      }\n    }, \"Pay Period: \", formatDate(request.fromDate, 'DD/MM/YYYY'), ' ', \"- \", formatDate(request.toDate, 'DD/MM/YYYY')), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 23\n      }\n    }, \"Total token request: \", request.tokenMustPay), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }, \"Previous paid out: \", request.previousPaidOut), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 23\n      }\n    }, \"Remaining token must pay: \", request.pendingToken), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 23\n      }\n    }, \"Note: \", request.requestNote), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 23\n      }\n    }, \"Date requested: \", formatDate(request.fromDate)), __jsx(Descriptions, {\n      title: \"Payment Account Information\",\n      column: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 23\n      }\n    }, paymentInfo.length > 0 ? paymentInfo : ''))), __jsx(Col, {\n      md: 24,\n      lg: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 23\n      }\n    }, \"Status:\"), __jsx(Select, {\n      style: {\n        width: '100%'\n      },\n      onChange: e => this.setState({\n        status: e\n      }),\n      defaultValue: this.state.status || 'N/A',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 23\n      }\n    }, __jsx(Select.Option, {\n      key: \"approved\",\n      value: \"approved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, \"Approved\"), __jsx(Select.Option, {\n      key: \"pending\",\n      value: \"pending\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, \"Pending\"), __jsx(Select.Option, {\n      key: \"rejected\",\n      value: \"rejected\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, \"Rejected\"), __jsx(Select.Option, {\n      key: \"done\",\n      value: \"done\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }, \"Done\"))), __jsx(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 23\n      }\n    }, \"Note: \"), __jsx(Input.TextArea, {\n      defaultValue: adminNote,\n      style: {\n        width: '100%'\n      },\n      onChange: v => {\n        this.setState({\n          adminNote: v.target.value\n        });\n      },\n      placeholder: \"Add your comment here...\",\n      autoSize: {\n        minRows: 3\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 23\n      }\n    })), __jsx(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }\n    }, __jsx(Button, {\n      danger: true,\n      onClick: this.onUpdate.bind(this, request._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 23\n      }\n    }, \"Update\"))))) : __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }\n    }, \"Request not found.\"))));\n  }\n\n}\n\n_defineProperty(PayoutDetailPage, \"authenticate\", true);\n\n_defineProperty(PayoutDetailPage, \"onlyPerformer\", true);\n\nexport default PayoutDetailPage;","map":null,"metadata":{},"sourceType":"module"}