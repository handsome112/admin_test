{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/performer/create.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment, createRef } from 'react';\nimport { message, Tabs } from 'antd';\nimport Page from '@components/common/layout/page';\nimport Router from 'next/router';\nimport { performerService, performerCategoryService } from '@services/index';\nimport { utilsService } from '@services/utils.service';\nimport { validateUsername, getResponseError } from '@lib/utils';\nimport { AccountForm } from '@components/performer/AccountForm';\nimport { PerformerDocument } from '@components/performer/Document';\nimport { PerformerSchedule } from '@components/performer/Schedule';\nimport { SocialsForm } from '@components/performer/socialsForm';\nimport { BreadcrumbComponent } from '@components/common';\nimport { CommissionSettingForm } from '@components/performer/commission-setting';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\n\nclass PerformerCreate extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      creating: false,\n      fetching: false\n    });\n\n    _defineProperty(this, \"customFields\", {});\n\n    _defineProperty(this, \"formRef\", createRef());\n\n    _defineProperty(this, \"scheduleValue\", {\n      mon: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      tue: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      wed: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      thu: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      fri: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      sat: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      sun: {\n        start: '00:00',\n        end: '',\n        closed: true\n      }\n    });\n\n    _defineProperty(this, \"dates\", []);\n  }\n\n  static async getInitialProps() {\n    const [countries, languages, categories] = await Promise.all([utilsService.countriesList(), utilsService.languagesList(), performerCategoryService.search({\n      sortBy: 'ordering',\n      sort: 'asc',\n      limit: 100\n    })]);\n    return {\n      countries: countries.data,\n      languages: languages.data,\n      categories: categories.data && categories.data.data ? categories.data.data : []\n    };\n  }\n\n  async submit(data) {\n    try {\n      if (data.password !== data.rePassword) {\n        return message.error('Confirm password mismatch!');\n      }\n\n      if (!validateUsername(data.username)) {\n        return message.error('Username is invalid!');\n      }\n\n      this.setState({\n        creating: true\n      });\n      const resp = await performerService.create(_objectSpread(_objectSpread(_objectSpread({}, data), this.customFields), {}, {\n        schedule: this.scheduleValue\n      }));\n      message.success('Updated successfully');\n      Router.push({\n        pathname: '/performer/update',\n        query: {\n          id: resp.data._id\n        }\n      }, `/performer/update?id=${resp.data._id}`, {\n        shallow: false\n      });\n    } catch (e) {\n      const err = (await Promise.resolve(e)) || {};\n      message.error(getResponseError(err) || 'An error occurred, please try again!');\n    } finally {\n      this.setState({\n        creating: false\n      });\n    }\n  }\n\n  onUploaded(field, resp) {\n    this.customFields[field] = resp.response.data._id;\n  }\n\n  onFormRefSubmit() {\n    this.formRef.formRefSubmit();\n  }\n\n  onChangeTime(dates, dateStrings, key) {\n    this.dates = dates;\n    const start = dateStrings[0];\n    const end = dateStrings[1];\n    let objectKey = this.scheduleValue[key];\n    objectKey['start'] = start;\n    objectKey['end'] = end;\n    this.scheduleValue[key] = _objectSpread(_objectSpread({}, this.scheduleValue[key]), objectKey);\n  }\n\n  onChangeCloded(checked, key) {\n    const objectKey = this.scheduleValue[key];\n    objectKey['closed'] = checked;\n    this.scheduleValue[key] = _objectSpread(_objectSpread({}, this.scheduleValue[key]), objectKey);\n  }\n\n  onCreateSocials(values) {\n    this.customFields['socials'] = values;\n  }\n\n  onCreateCommissionSetting(values) {\n    this.customFields['commissionSetting'] = values;\n    this.onFormRefSubmit();\n  }\n\n  render() {\n    const {\n      creating\n    } = this.state;\n    const {\n      countries,\n      languages,\n      categories\n    } = this.props;\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, \"Create performer\")), __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Performers',\n        href: '/performer'\n      }, {\n        title: 'Create new performer'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, __jsx(Tabs, _extends({\n      defaultActiveKey: \"basic\",\n      tabPosition: \"left\"\n    }, layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 32\n        }\n      }, \"General info\"),\n      key: \"basic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, __jsx(AccountForm, {\n      ref: el => this.formRef = el,\n      onUploaded: this.onUploaded.bind(this),\n      onFinish: this.submit.bind(this),\n      submiting: creating,\n      countries: countries,\n      languages: languages,\n      categories: categories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 32\n        }\n      }, \"Socials\"),\n      key: \"socials\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, __jsx(SocialsForm, {\n      ref: el => this.formRef = el,\n      socials: null,\n      onFinish: this.onCreateSocials.bind(this),\n      submiting: creating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 32\n        }\n      }, \"Document\"),\n      key: \"document\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, __jsx(PerformerDocument, {\n      update: false,\n      onUploaded: this.onUploaded.bind(this),\n      submiting: creating,\n      onFormRefSubmit: this.onFormRefSubmit.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 32\n        }\n      }, \"Schedule\"),\n      key: \"schedule\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, __jsx(PerformerSchedule, {\n      onChangeCloded: this.onChangeCloded.bind(this),\n      onChangeTime: this.onChangeTime.bind(this),\n      scheduleValue: this.scheduleValue,\n      submiting: creating,\n      onFormRefSubmit: this.onFormRefSubmit.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 20\n        }\n      }, \"Commission Setting\"),\n      key: \"commission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }, __jsx(CommissionSettingForm, {\n      submiting: creating,\n      onFinish: this.onCreateCommissionSetting.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default PerformerCreate;","map":null,"metadata":{},"sourceType":"module"}