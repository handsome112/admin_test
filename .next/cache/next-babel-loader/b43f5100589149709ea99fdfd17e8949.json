{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/menu/common/menu-tree.select.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { TreeSelect } from 'antd';\nimport { sortBy } from 'lodash';\nimport { menuService } from '@services/menu.service';\nimport * as _ from 'lodash';\nexport class SelectMenuTreeDropdown extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_initalData\", []);\n\n    _defineProperty(this, \"state\", {\n      data: []\n    });\n\n    _defineProperty(this, \"handleSearch\", value => {\n      const q = value.toLowerCase();\n\n      const filtered = this._initalData.filter(p => {\n        return p.title.includes(q) || (p.title || '').toLowerCase().includes(q);\n      });\n\n      this.setState({\n        data: this.mapDataNode(filtered)\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.loadMenus();\n  }\n\n  buildTree(data = [], parent, tree) {\n    tree = typeof tree !== 'undefined' ? tree : [];\n    parent = typeof parent !== 'undefined' ? parent : {\n      _id: ''\n    };\n\n    const children = _.filter(data, child => (child.parentId || '') == parent._id);\n\n    if (!_.isEmpty(children)) {\n      if (!parent._id) {\n        tree = children;\n      } else {\n        parent['children'] = children;\n      }\n\n      _.each(children, child => this.buildTree(data, child));\n    }\n\n    return this.mapDataNode(tree);\n  }\n\n  async mapDataNode(data) {\n    if (data && data.length > 0) {\n      return Promise.all(data.map(async item => {\n        let children = [];\n\n        if (item.children) {\n          children = await this.mapDataNode(item.children);\n        }\n\n        return {\n          title: item.title,\n          value: item._id,\n          ordering: item.ordering,\n          children: children.length > 0 ? _.orderBy(children, 'ordering', 'asc') : [],\n          disabled: this.props.menu && this.props.menu._id === item._id ? true : false\n        };\n      }));\n    }\n  }\n\n  async loadMenus(q) {\n    // TODO - should check for better option?\n    const resp = await menuService.search({\n      limit: 1000,\n      sortBy: 'ordering',\n      sort: 'asc'\n    });\n    this._initalData = sortBy(resp.data.data, i => i.title);\n    this.setState({\n      data: await this.buildTree(this._initalData)\n    });\n  }\n\n  render() {\n    const {\n      disabled,\n      defaultValue\n    } = this.props;\n    return __jsx(TreeSelect, {\n      showSearch: true,\n      style: this.props.style || {\n        width: '100%'\n      },\n      value: this.props.value || defaultValue,\n      dropdownStyle: {\n        maxHeight: 400,\n        overflow: 'auto'\n      },\n      treeData: this.state.data,\n      placeholder: this.props.placeholder || 'Please select',\n      treeDefaultExpandAll: true,\n      onChange: value => {\n        this.props.onSelect(value);\n      },\n      onSearch: this.handleSearch,\n      disabled: disabled,\n      allowClear: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}