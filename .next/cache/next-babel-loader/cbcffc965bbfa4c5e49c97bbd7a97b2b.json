{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/admin.dtest.live/src/components/photo/form-upload-photo.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent, createRef, Fragment } from 'react';\nimport { Form, Input, Select, Upload, Button, message, Progress } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { SelectPerformerDropdown } from '@components/performer/common/select-performer-dropdown';\nimport { ThumbnailPhoto } from '@components/photo/thumbnail-photo';\nimport { SelectGalleryDropdown } from '@components/gallery/common/select-gallery-dropdown';\nimport { galleryService } from '@services/gallery.service';\nvar layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nvar validateMessages = {\n  required: 'This field is required!'\n};\nexport var FormUploadPhoto = /*#__PURE__*/function (_PureComponent) {\n  _inherits(FormUploadPhoto, _PureComponent);\n\n  var _super = _createSuper(FormUploadPhoto);\n\n  function FormUploadPhoto() {\n    var _this;\n\n    _classCallCheck(this, FormUploadPhoto);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      preview: null,\n      galleries: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"formRef\", void 0);\n\n    return _this;\n  }\n\n  _createClass(FormUploadPhoto, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.formRef) this.formRef = createRef();\n      var photo = this.props.photo;\n      var pId = photo && photo.performerId || this.props.performerId || '';\n\n      if (pId) {\n        this.findGalleries(pId);\n      }\n    }\n  }, {\n    key: \"findGalleries\",\n    value: function () {\n      var _findGalleries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(performerId) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return galleryService.search({\n                  performerId: performerId,\n                  limit: 1000\n                });\n\n              case 2:\n                resp = _context.sent;\n                this.setState({\n                  galleries: resp.data.data || []\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function findGalleries(_x) {\n        return _findGalleries.apply(this, arguments);\n      }\n\n      return findGalleries;\n    }()\n  }, {\n    key: \"setFormVal\",\n    value: function setFormVal(field, val) {\n      var instance = this.formRef.current;\n      instance.setFieldsValue(_defineProperty({}, field, val));\n\n      if (field === 'performerId') {\n        this.findGalleries(val);\n      }\n    }\n  }, {\n    key: \"beforeUpload\",\n    value: function beforeUpload(file) {\n      var _this2 = this;\n\n      var ext = file.name.split('.').pop().toLowerCase();\n      var isImageAccept = process.env.NEXT_PUBLIC_IMAGE_ACCPET.split(',').map(function (item) {\n        return item.trim();\n      }).indexOf(\".\".concat(ext));\n\n      if (isImageAccept === -1) {\n        message.error(\"You can only upload \".concat(process.env.NEXT_PUBLIC_IMAGE_ACCPET, \" file!\"));\n        return false;\n      }\n\n      var isLt2M = file.size / 1024 / 1024 < (process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2);\n\n      if (!isLt2M) {\n        message.error(\"Image must smaller than \".concat(process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB!\"));\n        return false;\n      }\n\n      var reader = new FileReader();\n      reader.addEventListener('load', function () {\n        return _this2.setState({\n          preview: reader.result\n        });\n      });\n      reader.readAsDataURL(file);\n      this.props.beforeUpload(file);\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (!this.formRef) this.formRef = createRef();\n      var _this$props = this.props,\n          photo = _this$props.photo,\n          submit = _this$props.submit,\n          uploading = _this$props.uploading,\n          uploadPercentage = _this$props.uploadPercentage,\n          galleryId = _this$props.galleryId;\n      var preview = this.state.preview;\n      var havePhoto = photo ? true : false;\n      return __jsx(Form, _extends({}, layout, {\n        onFinish: submit && submit.bind(this),\n        onFinishFailed: function onFinishFailed() {\n          return message.error('Please complete the required fields');\n        },\n        name: \"form-upload\",\n        ref: this.formRef,\n        validateMessages: validateMessages,\n        initialValues: photo ? photo : {\n          title: '',\n          description: '',\n          status: 'draft',\n          performerId: this.props.performerId || '',\n          galleryId: this.props.galleryId || ''\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }\n      }), __jsx(Form.Item, {\n        name: \"performerId\",\n        label: \"Performer\",\n        rules: [{\n          required: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }, __jsx(SelectPerformerDropdown, {\n        disabled: havePhoto,\n        defaultValue: photo && photo.performerId || this.props.performerId || '',\n        onSelect: function onSelect(val) {\n          return _this3.setFormVal('performerId', val);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"galleryId\",\n        label: \"Gallery\",\n        rules: [{\n          required: true,\n          message: 'Please select a gallery'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }\n      }, __jsx(SelectGalleryDropdown, {\n        galleries: this.state.galleries,\n        disabled: this.state.galleries.length <= 0,\n        defaultValue: photo && photo.galleryId ? photo.galleryId : galleryId ? galleryId : null,\n        onSelect: function onSelect(val) {\n          return _this3.setFormVal('galleryId', val);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"title\",\n        rules: [{\n          required: true,\n          message: 'Please input title of photo!'\n        }],\n        label: \"Title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, __jsx(Input, {\n        placeholder: \"Enter photo title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"description\",\n        label: \"Description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }, __jsx(Input.TextArea, {\n        rows: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"status\",\n        label: \"Status\",\n        rules: [{\n          required: true,\n          message: 'Please select status!'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, __jsx(Select, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }\n      }, __jsx(Select.Option, {\n        value: \"draft\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }\n      }, \"Draft\"), __jsx(Select.Option, {\n        key: \"active\",\n        value: \"active\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      }, \"Active\"), __jsx(Select.Option, {\n        key: \"inactive\",\n        value: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }\n      }, \"Inactive\"))), __jsx(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        key: \"thumbnail\",\n        className: \"ant-row ant-form-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"ant-col ant-col-4 ant-form-item-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }\n      }, \"Photo\")), __jsx(\"div\", {\n        className: \"ant-col ant-col-16 ant-form-item-control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }\n      }, !havePhoto ? __jsx(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }\n      }, __jsx(Upload, {\n        accept: process.env.NEXT_PUBLIC_IMAGE_ACCPET || 'image/*',\n        multiple: false,\n        showUploadList: false,\n        disabled: uploading || havePhoto,\n        beforeUpload: function beforeUpload(file) {\n          return _this3.beforeUpload(file);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 19\n        }\n      }, preview ? __jsx(\"img\", {\n        src: preview,\n        alt: \"file\",\n        style: {\n          width: '250px',\n          marginBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 23\n        }\n      }) : null, __jsx(\"div\", {\n        style: {\n          clear: 'both'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }\n      }), !havePhoto && __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 23\n        }\n      }, __jsx(UploadOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }\n      }), \" Select File\")), uploadPercentage ? __jsx(Progress, {\n        percent: uploadPercentage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }\n      }) : null) : __jsx(ThumbnailPhoto, {\n        photo: photo,\n        style: {\n          width: '250px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }\n      }), __jsx(\"div\", {\n        className: \"ant-form-item-explain\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }\n      }, \"Image must smaller than \", process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB! Only accept \", process.env.NEXT_PUBLIC_IMAGE_ACCPET, \".\"))))), __jsx(Form.Item, {\n        wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n          offset: 4\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }\n      }, __jsx(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: uploading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }\n      }, havePhoto ? 'Update' : 'Upload')));\n    }\n  }]);\n\n  return FormUploadPhoto;\n}(PureComponent);","map":null,"metadata":{},"sourceType":"module"}