{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/video/form-upload-video.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent, createRef, Fragment } from 'react';\nimport { Form, Input, InputNumber, Select, Upload, Button, message, Progress, Switch } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { SelectPerformerDropdown } from '@components/performer/common/select-performer-dropdown';\nimport { ThumbnailVideo } from '@components/video/thumbnail-video';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!'\n};\nexport class FormUploadVideo extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      previewThumbnail: null,\n      previewVideo: null,\n      isSale: false\n    });\n\n    _defineProperty(this, \"formRef\", void 0);\n  }\n\n  componentDidMount() {\n    if (!this.formRef) this.formRef = createRef();\n    const {\n      video\n    } = this.props;\n\n    if (video) {\n      this.setState({\n        previewThumbnail: video.thumbnail ? video.thumbnail : null,\n        previewVideo: video.video && video.video.url ? video.video.url : null,\n        isSale: !!video.isSaleVideo\n      }, () => {\n        if (this.state.previewVideo) {\n          const video = document.getElementById('video');\n          video.setAttribute('src', this.state.previewVideo);\n        }\n      });\n    }\n  }\n\n  setFormVal(field, val) {\n    const instance = this.formRef.current;\n    instance.setFieldsValue({\n      [field]: val\n    });\n  }\n\n  beforeUpload(file, field) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => this.setState(field === 'thumbnail' ? {\n      previewThumbnail: reader.result\n    } : {\n      previewVideo: reader.result\n    }, () => {\n      if (field === 'video') {\n        const video = document.getElementById('video');\n        video.setAttribute('src', reader.result.toString());\n      }\n    }));\n    reader.readAsDataURL(file);\n    this.props.beforeUpload(file, field);\n    return false;\n  }\n\n  render() {\n    if (!this.formRef) this.formRef = createRef();\n    const {\n      video,\n      submit,\n      uploading,\n      uploadPercentage\n    } = this.props;\n    const {\n      previewThumbnail,\n      previewVideo,\n      isSale\n    } = this.state;\n    const haveVideo = video ? true : false;\n    return __jsx(Form, _extends({}, layout, {\n      onFinish: submit && submit.bind(this),\n      onFinishFailed: () => message.error('Please complete the required fields'),\n      name: \"form-upload\",\n      ref: this.formRef,\n      validateMessages: validateMessages,\n      initialValues: video ? video : {\n        title: '',\n        token: 0,\n        description: '',\n        status: 'draft',\n        performerId: '',\n        isSaleVideo: video === null || video === void 0 ? void 0 : video.isSaleVideo\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }), __jsx(Form.Item, {\n      name: \"performerId\",\n      label: \"Performer\",\n      rules: [{\n        required: true\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, __jsx(SelectPerformerDropdown, {\n      disabled: haveVideo,\n      defaultValue: video && video.performerId,\n      onSelect: val => this.setFormVal('performerId', val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"title\",\n      rules: [{\n        required: true,\n        message: 'Please input title of video!'\n      }],\n      label: \"Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      placeholder: \"Enter video title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"isSaleVideo\",\n      label: \"Is Sale?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, __jsx(Switch, {\n      defaultChecked: video === null || video === void 0 ? void 0 : video.isSaleVideo,\n      onChange: checked => {\n        this.setFormVal('isSaleVideo', checked);\n        this.setState({\n          isSale: checked\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"token\",\n      label: \"Token\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, __jsx(InputNumber, {\n      disabled: !isSale,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"description\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, __jsx(Input.TextArea, {\n      rows: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"status\",\n      label: \"Status\",\n      rules: [{\n        required: true,\n        message: 'Please select status!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, __jsx(Select.Option, {\n      value: \"draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, \"Draft\"), __jsx(Select.Option, {\n      key: \"active\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, \"Active\"), __jsx(Select.Option, {\n      key: \"inactive\",\n      value: \"inactive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, \"Inactive\"))), __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      key: \"thumbnail\",\n      className: \"ant-row ant-form-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"ant-col ant-col-4 ant-form-item-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }, \"Thumbnail\")), __jsx(\"div\", {\n      className: \"ant-col ant-col-16 ant-form-item-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, !haveVideo ? __jsx(Upload, {\n      accept: process.env.NEXT_PUBLIC_IMAGE_ACCPET || 'image/*',\n      multiple: false,\n      showUploadList: false,\n      disabled: uploading || haveVideo,\n      beforeUpload: file => this.beforeUpload(file, 'thumbnail'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, previewThumbnail ? __jsx(\"img\", {\n      src: previewThumbnail,\n      alt: \"file\",\n      style: {\n        width: '250px',\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }) : null, __jsx(\"div\", {\n      style: {\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }), !haveVideo && __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }, __jsx(UploadOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 23\n      }\n    }), \" Select File\")) : __jsx(ThumbnailVideo, {\n      video: video,\n      style: {\n        width: '250px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"ant-form-item-explain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, \"Image must smaller than \", process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB! Only accept \", process.env.NEXT_PUBLIC_IMAGE_ACCPET, \".\")))), __jsx(\"div\", {\n      key: \"video\",\n      className: \"ant-row ant-form-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"ant-col ant-col-4 ant-form-item-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, \"Video\")), __jsx(\"div\", {\n      className: \"ant-col ant-col-16 ant-form-item-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, __jsx(Upload, {\n      accept: process.env.NEXT_PUBLIC_VIDEO_ACCEPT || 'video/*,.mkv',\n      multiple: false,\n      showUploadList: false,\n      disabled: uploading || haveVideo,\n      beforeUpload: file => this.beforeUpload(file, 'video'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, previewVideo ? __jsx(\"video\", {\n      controls: true,\n      id: \"video\",\n      style: {\n        width: '250px',\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 19\n      }\n    }) : null, __jsx(\"div\", {\n      style: {\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    }), !haveVideo && __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 19\n      }\n    }, __jsx(UploadOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }), \" Select File\")), uploadPercentage ? __jsx(Progress, {\n      percent: uploadPercentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }) : null, __jsx(\"div\", {\n      className: \"ant-form-item-explain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, \"Video must smaller than \", process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_VIDEO || 20, \"MB! Only accept \", process.env.NEXT_PUBLIC_VIDEO_ACCEPT || 'video/*,.mkv', \".\"))))), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: uploading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    }, haveVideo ? 'Update' : 'Upload')));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}