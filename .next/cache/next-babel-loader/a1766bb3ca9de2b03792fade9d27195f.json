{"ast":null,"code":"import { flatten } from \"lodash\";\nimport { put } from \"redux-saga/effects\";\nimport { createSagas } from \"@lib/redux\";\nimport Router from 'next/router';\nimport { login, loginSuccess, logout, loginFail, logoutSuccess } from \"./actions\";\nimport { updateCurrentUser } from '../user/actions';\nimport { authService, userService } from \"src/services\";\nimport { resetAppState } from '@redux/actions';\nimport { message } from \"antd\";\nconst authSagas = [{\n  on: login,\n\n  *worker(data) {\n    try {\n      const payload = data.payload;\n      const resp = (yield authService.login(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setToken(resp.token);\n      const userResp = (yield userService.me()).data;\n\n      if (!userResp.roles.includes('admin')) {\n        message.error('You don\\'t have permission to access this page');\n        return yield logout();\n      }\n\n      yield put(updateCurrentUser(userResp));\n      yield put(loginSuccess());\n      Router.push('/dashboard');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(loginFail(error));\n    }\n  }\n\n}, {\n  on: logout,\n\n  *worker() {\n    try {\n      yield authService.removeToken();\n      yield put(logoutSuccess());\n      yield put(resetAppState()); // TODO - should use a better way?\n\n      Router.push('/auth/login');\n    } catch (e) {// message.error('Something went wrong!');\n    }\n  }\n\n}];\nexport default flatten(createSagas(authSagas));","map":null,"metadata":{},"sourceType":"module"}