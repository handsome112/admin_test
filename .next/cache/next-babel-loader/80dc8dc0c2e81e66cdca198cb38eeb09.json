{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/performer/Schedule.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { Form, TimePicker, Button, Checkbox } from 'antd';\nimport moment from 'moment';\nconst layout = {\n  labelCol: {\n    lg: {\n      span: 4\n    },\n    sm: {\n      span: 6\n    }\n  },\n  wrapperCol: {\n    lg: {\n      span: 16\n    },\n    sm: {\n      span: 14\n    }\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nexport class PerformerSchedule extends PureComponent {\n  render() {\n    const {\n      onFormRefSubmit,\n      submiting,\n      onChangeTime,\n      scheduleValue,\n      onChangeCloded\n    } = this.props;\n    const dayValue = {\n      mon: {\n        day: 'Monday'\n      },\n      tue: {\n        day: 'Tuesday'\n      },\n      wed: {\n        day: 'Wednesday'\n      },\n      thu: {\n        day: 'Thursday'\n      },\n      fri: {\n        day: 'Friday'\n      },\n      sat: {\n        day: 'Saturday'\n      },\n      sun: {\n        day: 'Sunday'\n      }\n    };\n    const format = 'HH:mm';\n    const {\n      RangePicker\n    } = TimePicker;\n    return __jsx(Form, _extends({}, layout, {\n      name: \"form-performer-schedule\",\n      onFinish: () => onFormRefSubmit(),\n      validateMessages: validateMessages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }), Object.keys(dayValue).map(key => __jsx(Form.Item, {\n      key: key,\n      label: dayValue[key].day,\n      initialValue: [moment(scheduleValue[key].start, format), scheduleValue[key].end ? moment(scheduleValue[key].end, format) : moment()],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, __jsx(RangePicker, {\n      onChange: (dates, dateStrings) => onChangeTime(dates, dateStrings, key),\n      picker: \"time\",\n      format: format,\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }), __jsx(Checkbox, {\n      name: key,\n      key: key,\n      defaultChecked: scheduleValue[key].closed,\n      onChange: e => onChangeCloded(e.target.checked, key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Not Available\"))), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: submiting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, \"Submit\")));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}