{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/studio/studio-account-form.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { Form, Input, Button, Select, Switch, message, InputNumber } from 'antd';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nexport default class StudioAccountForm extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false\n    });\n  }\n\n  render() {\n    const {\n      studio,\n      onFinish,\n      submiting,\n      countries\n    } = this.props;\n    return __jsx(Form, _extends({}, layout, {\n      name: \"form-performer\",\n      onFinish: onFinish,\n      onFinishFailed: () => message.error('Please complete the required fields in tab general info'),\n      validateMessages: validateMessages,\n      initialValues: studio ? studio : {\n        country: 'US',\n        status: 'active',\n        emailVerified: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }), __jsx(Form.Item, {\n      name: \"name\",\n      label: \"Studio name\",\n      rules: [{\n        pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n        message: 'Studio name must according to Alphanumeric formating'\n      }, {\n        whitespace: true,\n        message: 'Please input your Studio name!'\n      }, {\n        required: true,\n        message: 'Please input your Studio name!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"username\",\n      label: \"User Name\",\n      rules: [{\n        pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n        message: 'User name must according to Alphanumeric formating'\n      }, {\n        whitespace: true,\n        message: 'Please input your user name!'\n      }, {\n        required: true,\n        message: 'Please input your user name!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      placeholder: \"Username name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"email\",\n      label: \"Email Address\",\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      placeholder: \"studio@example.com\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    })), !studio && [__jsx(Form.Item, {\n      key: \"password\",\n      name: \"password\",\n      label: \"Password\",\n      rules: [{\n        required: true\n      }, {\n        min: 6\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, __jsx(Input.Password, {\n      placeholder: \"Performer password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Item, {\n      key: \"rePassword\",\n      name: \"rePassword\",\n      label: \"Confirm password\",\n      rules: [{\n        required: true\n      }, {\n        min: 6\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, __jsx(Input.Password, {\n      placeholder: \"Confirm performer password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }))], __jsx(Form.Item, {\n      name: \"country\",\n      label: \"Country\",\n      rules: [{\n        required: true\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      showSearch: true,\n      filterOption: (input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, countries.map(country => __jsx(Select.Option, {\n      key: country.code,\n      value: country.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, country.name)))), !studio && [__jsx(Form.Item, {\n      name: \"commission\",\n      label: \"Commission\",\n      rules: [{\n        validator: (_, value) => {\n          if (parseInt(value) > 0 && parseInt(value) < 100) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('Value must be greater than 0 and less than 100');\n        }\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, __jsx(InputNumber, {\n      min: 1,\n      max: 99,\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }))], __jsx(Form.Item, {\n      name: \"status\",\n      label: \"Status\",\n      rules: [{\n        required: true\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, __jsx(Select.Option, {\n      key: \"active\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, \"Active\"), __jsx(Select.Option, {\n      key: \"inactive\",\n      value: \"inactive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, \"Inactive\"))), __jsx(Form.Item, {\n      name: \"emailVerified\",\n      label: \"Verified Email\",\n      valuePropName: \"checked\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, __jsx(Switch, {\n      defaultChecked: studio && studio.emailVerified ? studio.emailVerified : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: submiting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }\n    }, \"Submit\")));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}