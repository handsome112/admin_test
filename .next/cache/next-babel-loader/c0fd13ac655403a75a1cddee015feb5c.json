{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/settings/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment, createRef } from 'react';\nimport dynamic from 'next/dynamic';\nimport { Form, Menu, message, Button, Input, InputNumber, Switch, Radio, Checkbox, Select } from 'antd';\nimport Page from '@components/common/layout/page';\nimport Loader from '@components/common/base/loader';\nimport { ImageUpload } from '@components/file/image-upload';\nimport SoundUpload from '@components/file/sound-upload';\nimport { authService } from '@services/auth.service';\nimport { settingService } from '@services/setting.service';\nimport { getResponseError } from '@lib/utils';\nimport { SelectPostDropdown } from '@components/post/select-post-dropdown';\nconst WYSIWYG = dynamic(() => import('@components/wysiwyg'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('@components/wysiwyg')],\n    modules: ['@components/wysiwyg']\n  }\n});\nconst {\n  Option\n} = Select;\n\nclass Settings extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"footerContent\", '');\n\n    _defineProperty(this, \"state\", {\n      updating: false,\n      loading: false,\n      selectedTab: 'general',\n      list: []\n    });\n\n    _defineProperty(this, \"formRef\", void 0);\n\n    _defineProperty(this, \"dataChange\", {});\n\n    _defineProperty(this, \"smtpInfo\", {\n      host: '',\n      port: 465,\n      secure: true,\n      auth: {\n        user: '',\n        password: ''\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.formRef = createRef();\n    this.loadSettings();\n  }\n\n  async onMenuChange(menu) {\n    await this.setState({\n      selectedTab: menu.key\n    });\n    await this.loadSettings();\n  }\n\n  async loadSettings() {\n    const {\n      selectedTab\n    } = this.state;\n\n    try {\n      await this.setState({\n        loading: true\n      });\n      const resp = await settingService.all(this.state.selectedTab);\n      this.dataChange = {};\n\n      if (selectedTab === 'mailer' && resp.data && resp.data.length) {\n        const info = resp.data.find(data => data.key === 'smtpTransporter');\n        if (info) this.smtpInfo = info.value;\n      }\n\n      this.setState({\n        list: resp.data\n      });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      await this.setState({\n        loading: false\n      });\n    }\n  }\n\n  async submit() {\n    try {\n      await this.setState({\n        updating: true\n      });\n\n      for (const key of Object.keys(this.dataChange)) {\n        await settingService.update(key, this.dataChange[key]);\n      }\n\n      message.success('Updated setting successfully');\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      await this.setState({\n        updating: false\n      });\n    }\n  }\n\n  renderUpload(setting, ref) {\n    if (!setting.meta || !setting.meta.upload) {\n      return null;\n    }\n\n    const uploadHeaders = {\n      authorization: authService.getToken()\n    };\n    return __jsx(\"div\", {\n      style: {\n        padding: '10px 0'\n      },\n      key: `upload${setting._id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, setting.meta.image ? __jsx(ImageUpload, {\n      imageUrl: setting.value,\n      uploadUrl: settingService.getFileUploadUrl(),\n      headers: uploadHeaders,\n      onUploaded: resp => {\n        const formInstance = this.formRef.current;\n        ref.current.input.value = resp.response.data.url;\n        formInstance.setFieldsValue({\n          [setting.key]: resp.response.data.url\n        });\n        this.dataChange[setting.key] = resp.response.data.url;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }) : __jsx(SoundUpload, {\n      fileUrl: setting.value,\n      uploadUrl: settingService.getFileUploadUrl(),\n      headers: uploadHeaders,\n      onUploaded: resp => {\n        const formInstance = this.formRef.current;\n        ref.current.input.value = resp.response.data.url;\n        formInstance.setFieldsValue({\n          [setting.key]: resp.response.data.url\n        });\n        this.dataChange[setting.key] = resp.response.data.url;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  setVal(field, val) {\n    this.dataChange[field] = val;\n  }\n\n  setObject(field, val) {\n    if (field === 'user' || field === 'pass') {\n      this.smtpInfo.auth[field] = val;\n    } else {\n      this.smtpInfo[field] = val;\n    }\n\n    this.dataChange.smtpTransporter = this.smtpInfo;\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  renderFormItem(setting) {\n    var _setting$value, _setting$value2, _setting$value3, _setting$value4, _setting$value4$auth, _setting$value5, _setting$value5$auth, _setting$meta, _setting$meta2;\n\n    const {\n      updating\n    } = this.state;\n    let type = setting.type;\n\n    if (setting.meta && setting.meta.textarea) {\n      type = 'textarea';\n    }\n\n    const ref = createRef();\n\n    switch (type) {\n      case 'textarea':\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          extra: setting.description,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }\n        }, __jsx(Input.TextArea, {\n          defaultValue: setting.value,\n          onChange: val => this.setVal(setting.key, val.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }\n        }));\n\n      case 'text-editor':\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          help: setting.description,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 11\n          }\n        }, __jsx(WYSIWYG, {\n          onChange: ({\n            html\n          }) => this.setVal(setting.key, html),\n          html: setting.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }\n        }));\n\n      case 'checkbox':\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 11\n          }\n        }, __jsx(Checkbox.Group, {\n          options: setting.meta.options,\n          onChange: checkedValues => this.setVal(setting.key, checkedValues),\n          defaultValue: setting.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }\n        }));\n\n      case 'number':\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          extra: setting.description,\n          name: setting.key,\n          rules: [{\n            validator: (_, value) => {\n              if (typeof value !== 'number') {\n                return Promise.reject('This field must be a number!');\n              }\n\n              if (setting.meta && typeof setting.meta.min !== 'undefined' && value < setting.meta.min) {\n                return Promise.reject('Minimum ' + setting.meta.min);\n              }\n\n              if (setting.meta && typeof setting.meta.min !== 'undefined' && value > setting.meta.max) {\n                return Promise.reject('Maximum ' + setting.meta.max);\n              }\n\n              return Promise.resolve();\n            }\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 11\n          }\n        }, __jsx(InputNumber, {\n          style: {\n            width: '100%'\n          },\n          step: setting.meta && typeof setting.meta.step !== 'undefined' ? setting.meta.step : 1,\n          defaultValue: setting.value,\n          onChange: val => this.setVal(setting.key, val),\n          min: setting.meta && typeof setting.meta.min !== 'undefined' ? setting.meta.min : Number.MIN_SAFE_INTEGER,\n          max: setting.meta && typeof setting.meta.max !== 'undefined' ? setting.meta.max : Number.MAX_SAFE_INTEGER,\n          type: \"number\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }\n        }));\n\n      case 'boolean':\n        return __jsx(\"div\", {\n          className: \"ant-row ant-form-item ant-form-item-with-help\",\n          key: setting._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 11\n          }\n        }, __jsx(\"div\", {\n          className: \"ant-col ant-col-4 ant-form-item-label\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }\n        }, __jsx(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }\n        }, setting.name)), __jsx(\"div\", {\n          className: \"ant-col ant-col-16 ant-form-item-control\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }\n        }, __jsx(Switch, {\n          defaultChecked: setting.value,\n          onChange: val => this.setVal(setting.key, val),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }\n        }), __jsx(\"div\", {\n          className: \"ant-form-item-explain\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }\n        }, setting.description)));\n\n      case 'commission':\n        return __jsx(Form.Item, {\n          name: setting.key,\n          label: setting.name,\n          key: setting._id,\n          extra: setting.description,\n          rules: [{\n            validator(_, v) {\n              if (parseInt(v) > 100 && parseInt(v) < 0) {\n                return Promise.reject('Please input number 0-100');\n              }\n\n              return Promise.resolve();\n            }\n\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 11\n          }\n        }, __jsx(InputNumber, {\n          min: 0,\n          max: 100,\n          defaultValue: setting.value,\n          onChange: val => this.setVal(setting.key, val),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }\n        }));\n\n      case 'mixed':\n        return __jsx(\"div\", {\n          className: \"ant-row ant-form-item ant-form-item-with-help\",\n          key: setting._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 11\n          }\n        }, __jsx(\"div\", {\n          className: \"ant-col ant-col-4 ant-form-item-label\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"setting-name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }\n        }, setting.name)), __jsx(\"div\", {\n          className: \"ant-col ant-col-20 ant-form-item-control\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }\n        }, __jsx(\"div\", {\n          className: \"ant-form-item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }\n        }, __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"host-name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 19\n          }\n        }, \"Host\"), __jsx(Input, {\n          defaultValue: setting === null || setting === void 0 ? void 0 : (_setting$value = setting.value) === null || _setting$value === void 0 ? void 0 : _setting$value.host,\n          onChange: val => this.setObject('host', val.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 19\n          }\n        })), __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }\n        }, __jsx(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 19\n          }\n        }, \"Port\"), __jsx(Input, {\n          defaultValue: setting === null || setting === void 0 ? void 0 : (_setting$value2 = setting.value) === null || _setting$value2 === void 0 ? void 0 : _setting$value2.port,\n          onChange: val => this.setObject('port', val.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 19\n          }\n        })), __jsx(\"div\", {\n          style: {\n            margin: '10px 0'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }\n        }, __jsx(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 19\n          }\n        }, __jsx(Checkbox, {\n          defaultChecked: (setting === null || setting === void 0 ? void 0 : (_setting$value3 = setting.value) === null || _setting$value3 === void 0 ? void 0 : _setting$value3.secure) || false,\n          onChange: e => this.setObject('secure', e.target.checked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 21\n          }\n        }), ' ', \"Secure (true for port 465, false for other ports)\")), __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }\n        }, __jsx(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 19\n          }\n        }, \"Auth user\"), __jsx(Input, {\n          defaultValue: setting === null || setting === void 0 ? void 0 : (_setting$value4 = setting.value) === null || _setting$value4 === void 0 ? void 0 : (_setting$value4$auth = _setting$value4.auth) === null || _setting$value4$auth === void 0 ? void 0 : _setting$value4$auth.user,\n          onChange: val => this.setObject('user', val.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 19\n          }\n        })), __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }\n        }, __jsx(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 19\n          }\n        }, \"Auth password\"), __jsx(Input, {\n          defaultValue: setting === null || setting === void 0 ? void 0 : (_setting$value5 = setting.value) === null || _setting$value5 === void 0 ? void 0 : (_setting$value5$auth = _setting$value5.auth) === null || _setting$value5$auth === void 0 ? void 0 : _setting$value5$auth.pass,\n          onChange: val => this.setObject('pass', val.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 19\n          }\n        }))), __jsx(\"div\", {\n          className: \"ant-form-item-explain\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }\n        }, setting.description), __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }\n        }, __jsx(Button, {\n          disabled: updating,\n          loading: updating,\n          onClick: this.verifyMailer.bind(this),\n          type: \"link\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }\n        }, \"Once saved, click here to send a testing email using this configuration above\"))));\n\n      case 'radio':\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          help: setting.description,\n          extra: setting.extra,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 11\n          }\n        }, __jsx(Radio.Group, {\n          onChange: val => this.setVal(setting.key, val.target.value),\n          defaultValue: setting.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }\n        }, (_setting$meta = setting.meta) === null || _setting$meta === void 0 ? void 0 : _setting$meta.value.map(v => __jsx(Radio, {\n          value: v.key,\n          checked: this.dataChange[setting.key] === v.key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }\n        }, v.name))));\n\n      case 'post':\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          help: setting.description,\n          extra: setting.extra,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }\n        }, __jsx(SelectPostDropdown, {\n          defaultValue: setting.value,\n          onSelect: val => this.setVal(setting.key, val),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 19\n          }\n        }));\n\n      case 'dropdown':\n      case 'radio':\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          help: setting.description,\n          extra: setting.extra,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 11\n          }\n        }, __jsx(Select, {\n          onChange: val => this.setVal(setting.key, val),\n          defaultValue: setting.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }\n        }, (_setting$meta2 = setting.meta) === null || _setting$meta2 === void 0 ? void 0 : _setting$meta2.value.map(v => __jsx(Option, {\n          value: v.key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 17\n          }\n        }, v.name))));\n\n      default:\n        return __jsx(Form.Item, {\n          label: setting.name,\n          key: setting._id,\n          help: setting.description,\n          extra: setting.extra,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 11\n          }\n        }, __jsx(Input, {\n          defaultValue: setting.value,\n          ref: ref,\n          key: `input${setting._id}`,\n          onChange: val => this.setVal(setting.key, val.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }\n        }), this.renderUpload(setting, ref));\n    }\n  }\n\n  async verifyMailer() {\n    try {\n      this.setState({\n        updating: true\n      });\n      await settingService.verifyMailer();\n      message.success('We\\'ve sent and test email, please check your email inbox or spam folder');\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(err && err.errno ? err.errno : 'Could not verify this SMTP transporter');\n    } finally {\n      this.setState({\n        updating: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      updating,\n      selectedTab,\n      list,\n      loading\n    } = this.state;\n    const fixedTabs = ['commission', 'ccbill', 'custom'];\n    const layout = fixedTabs.includes(selectedTab) ? {\n      labelCol: {\n        span: 8\n      },\n      wrapperCol: {\n        span: 16\n      }\n    } : {\n      labelCol: {\n        span: 4\n      },\n      wrapperCol: {\n        span: 16\n      }\n    };\n    const initialValues = {};\n    list.forEach(item => {\n      initialValues[item.key] = item.value;\n    });\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }\n    }, \"Site Settings\")), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }\n    }, __jsx(Menu, {\n      onClick: this.onMenuChange.bind(this),\n      selectedKeys: [selectedTab],\n      mode: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 13\n      }\n    }, __jsx(Menu.Item, {\n      key: \"general\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 15\n      }\n    }, \"General\"), __jsx(Menu.Item, {\n      key: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 15\n      }\n    }, \"Email\"), __jsx(Menu.Item, {\n      key: \"custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 15\n      }\n    }, \"Custom\"), __jsx(Menu.Item, {\n      key: \"commission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 15\n      }\n    }, \"Commission\"), __jsx(Menu.Item, {\n      key: \"ccbill\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 15\n      }\n    }, \"CCbill\"), __jsx(Menu.Item, {\n      key: \"mailer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 15\n      }\n    }, \"SMTP\"), __jsx(Menu.Item, {\n      key: \"analytics\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 15\n      }\n    }, \"Google Analytics\"), __jsx(Menu.Item, {\n      key: \"default-price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 15\n      }\n    }, \"Default Price\"), __jsx(Menu.Item, {\n      key: \"customText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 15\n      }\n    }, \"Custom Text\"), __jsx(Menu.Item, {\n      key: \"ant\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 15\n      }\n    }, \"Ant Media\"), __jsx(Menu.Item, {\n      key: \"currency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 15\n      }\n    }, \"Currency\"))), loading ? __jsx(Loader, {\n      spinning: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 13\n      }\n    }) : __jsx(Form, _extends({}, layout, {\n      layout: fixedTabs.includes(selectedTab) ? 'vertical' : 'horizontal',\n      name: \"setting-frm\",\n      onFinish: this.submit.bind(this),\n      initialValues: initialValues,\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 15\n      }\n    }), list.map(setting => this.renderFormItem(setting)), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      }),\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: updating,\n      disabled: updating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 19\n      }\n    }, \"Submit\")))));\n  }\n\n}\n\nexport default Settings;","map":null,"metadata":{},"sourceType":"module"}