{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/performer/online/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, message } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { performerService } from '@services/performer.service';\nimport { BreadcrumbComponent } from '@components/common';\nimport { getDiffToNow } from 'src/lib';\n\nclass Performers extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searching: false,\n      list: [],\n      pagination: {},\n      query: {\n        limit: 10,\n        sortBy: 'updatedAt',\n        sort: 'desc'\n      }\n    });\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  componentDidMount() {\n    this.search();\n  }\n\n  async search(page = 1, pagination = {}, sorter = {}) {\n    try {\n      this.setState({\n        searching: true\n      });\n\n      let query = _objectSpread({}, this.state.query);\n\n      query = _objectSpread(_objectSpread({}, query), {}, {\n        offset: (page - 1) * query.limit\n      });\n\n      if (sorter) {\n        query.sortBy = sorter.field || 'updatedAt';\n        query.sort = sorter.order ? sorter.order === 'descend' ? 'desc' : 'asc' : 'desc';\n      }\n\n      const resp = await performerService.searchOnline(query);\n      this.setState({\n        query,\n        list: resp.data.data,\n        pagination: _objectSpread(_objectSpread({}, pagination), {}, {\n          total: resp.data.total\n        })\n      });\n    } catch (e) {\n      message.error('An error occurred, please try again!');\n    } finally {\n      this.setState({\n        searching: false\n      });\n    }\n  }\n\n  async handleTableChange(pagination, filters, sorter) {\n    this.search(pagination.current, pagination, sorter);\n  }\n\n  render() {\n    const {\n      list,\n      searching,\n      pagination\n    } = this.state;\n    const columns = [{\n      title: 'ID',\n      dataIndex: '_id'\n    }, {\n      title: 'Username',\n      dataIndex: 'username',\n      sorter: true\n    }, {\n      title: 'Email',\n      dataIndex: 'email',\n      sorter: true\n    }, {\n      title: 'Last Streaming Time',\n      dataIndex: 'lastStreamingTime',\n      render: lastStreamingTime => lastStreamingTime && getDiffToNow(lastStreamingTime),\n      sorter: true\n    }, {\n      title: 'Watching',\n      dataIndex: 'watching'\n    }];\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"Manage Performers\")), __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Performers',\n        href: '/performer'\n      }, {\n        title: 'Models online'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, __jsx(Table, {\n      dataSource: list,\n      columns: columns,\n      rowKey: \"_id\",\n      loading: searching,\n      pagination: pagination,\n      onChange: this.handleTableChange.bind(this),\n      scroll: {\n        x: 700,\n        y: 650\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStates = state => ({\n  currentUser: state.user.current\n});\n\nexport default connect(mapStates)(Performers);","map":null,"metadata":{},"sourceType":"module"}