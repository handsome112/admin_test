{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { APIRequest } from './api-request';\nexport class UserService extends APIRequest {\n  me(headers) {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload) {\n    return this.put('/admin/users', payload);\n  }\n\n  create(payload) {\n    return this.post('/admin/users', payload);\n  }\n\n  update(id, payload) {\n    return this.put(`/admin/users/${id}`, payload);\n  }\n\n  getAvatarUploadUrl(userId) {\n    if (userId) {\n      return `${process.env.NEXT_PUBLIC_API_ENDPOINT}/admin/users/${userId}/avatar/upload`;\n    }\n\n    return `${process.env.NEXT_PUBLIC_API_ENDPOINT}/users/avatar/upload`;\n  }\n\n  uploadAvatarUser(file, userId) {\n    return this.upload(`/admin/users/${userId}/avatar/upload`, [{\n      file,\n      fieldname: 'avatar'\n    }]);\n  }\n\n  search(query) {\n    return this.get(this.buildUrl('/admin/users/search', query));\n  }\n\n  findById(id) {\n    return this.get(`/admin/users/${id}/view`);\n  }\n\n  exportCsv(query) {\n    return process.env.NEXT_PUBLIC_API_ENDPOINT + this.buildUrl('/admin/users/export/csv', _objectSpread({}, query));\n  }\n\n}\nexport const userService = new UserService();","map":null,"metadata":{},"sourceType":"module"}