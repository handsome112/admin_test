{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/performer/update.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment, createRef } from 'react';\nimport { Tabs, message } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { AccountForm } from '@components/performer/AccountForm';\nimport { PerformerDocument } from '@components/performer/Document';\nimport { PerformerSchedule } from '@components/performer/Schedule';\nimport nextCookie from 'next-cookies';\nimport { authService, performerService, performerCategoryService, studioService } from '@services/index';\nimport Loader from '@components/common/base/loader';\nimport { utilsService } from '@services/utils.service';\nimport { UpdatePaswordForm } from '@components/user/update-password-form';\nimport { BreadcrumbComponent } from '@components/common';\nimport { SocialsForm } from '@components/performer/socialsForm';\nimport { CommissionSettingForm } from '@components/performer/commission-setting';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\n\nclass PerformerUpdate extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"formRef\", createRef());\n\n    _defineProperty(this, \"state\", {\n      pwUpdating: false,\n      updating: false,\n      fetching: false,\n      performer: {},\n      settingUpdating: false\n    });\n\n    _defineProperty(this, \"customFields\", {});\n\n    _defineProperty(this, \"scheduleValue\", {\n      mon: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      tue: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      wed: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      thu: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      fri: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      sat: {\n        start: '00:00',\n        end: '',\n        closed: true\n      },\n      sun: {\n        start: '00:00',\n        end: '',\n        closed: true\n      }\n    });\n\n    _defineProperty(this, \"dates\", null);\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        token\n      } = nextCookie(ctx);\n      const [countries, languages, phoneCodes, categories, studios] = await Promise.all([utilsService.countriesList(), utilsService.languagesList(), utilsService.phoneCodesList(), performerCategoryService.search({\n        sortBy: 'ordering',\n        sort: 'asc',\n        limit: 100\n      }), studioService.search({\n        limit: 100\n      }, {\n        Authorization: token\n      })]);\n      return _objectSpread({\n        countries: countries.data,\n        languages: languages.data,\n        phoneCodes: phoneCodes.data,\n        studios: studios.data.data,\n        categories: categories.data && categories.data.data ? categories.data.data : []\n      }, ctx.query);\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      console.log(error);\n      return;\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        fetching: true\n      });\n      const resp = await performerService.findById(this.props.id);\n      this.setState({\n        performer: resp.data\n      });\n\n      if (resp.data && resp.data.schedule) {\n        this.scheduleValue = _objectSpread(_objectSpread({}, this.scheduleValue), resp.data.schedule);\n      }\n    } catch (e) {\n      message.error('Error while fecting performer!');\n    } finally {\n      this.setState({\n        fetching: false\n      });\n    }\n  }\n\n  async submit(data) {\n    try {\n      this.setState({\n        updating: true\n      });\n      const updated = await performerService.update(this.props.id, _objectSpread(_objectSpread(_objectSpread({}, data), this.customFields), {}, {\n        schedule: this.scheduleValue\n      }));\n      this.setState({\n        performer: updated.data\n      });\n      message.success('Updated successfully');\n    } catch (e) {\n      // TODO - exact error message\n      message.error('An error occurred, please try again!');\n    } finally {\n      this.setState({\n        updating: false\n      });\n    }\n  }\n\n  async updatePassword(data) {\n    try {\n      this.setState({\n        pwUpdating: true\n      });\n      await authService.updatePassword(data.password, this.props.id, 'performer');\n      message.success('Password has been updated!');\n    } catch (e) {\n      message.error('An error occurred, please try again!');\n    } finally {\n      this.setState({\n        pwUpdating: false\n      });\n    }\n  }\n\n  onUploaded(field, resp) {\n    this.customFields[field] = resp.response.data._id;\n  }\n\n  onUpdateSocials(values) {\n    const {\n      performer\n    } = this.state;\n\n    const data = _objectSpread(_objectSpread({}, performer), values);\n\n    this.submit(data);\n  }\n\n  onFormRefSubmit() {\n    this.formRef.formRefSubmit();\n  }\n\n  onChangeTime(dates, dateStrings, key) {\n    this.dates = dates;\n    const start = dateStrings[0];\n    const end = dateStrings[1];\n    const objectKey = this.scheduleValue[key];\n    objectKey['start'] = start;\n    objectKey['end'] = end;\n    this.scheduleValue[key] = _objectSpread(_objectSpread({}, this.scheduleValue[key]), objectKey);\n  }\n\n  onChangeCloded(checked, key) {\n    const objectKey = this.scheduleValue[key];\n    objectKey['closed'] = checked;\n    this.scheduleValue[key] = _objectSpread(_objectSpread({}, this.scheduleValue[key]), objectKey);\n  }\n\n  async updateCommissionSetting(data) {\n    try {\n      this.setState({\n        settingUpdating: true\n      });\n      await performerService.updateCommissionSetting(this.props.id, _objectSpread(_objectSpread({}, data), {}, {\n        performerId: this.props.id\n      }));\n      message.success('Commission setting has been updated!');\n    } catch (error) {\n      message.error('An error occurred, please try again!');\n    } finally {\n      this.setState({\n        settingUpdating: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      pwUpdating,\n      performer,\n      updating,\n      fetching,\n      settingUpdating\n    } = this.state;\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }\n    }, \"Performer update\")), __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Performers',\n        href: '/performer'\n      }, {\n        title: performer.username\n      }, {\n        title: 'Update'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }\n    }), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }\n    }, fetching ? __jsx(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }) : __jsx(Tabs, _extends({\n      defaultActiveKey: \"basic\",\n      tabPosition: \"left\"\n    }, layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 34\n        }\n      }, \"General info\"),\n      key: \"basic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }, __jsx(AccountForm, _extends({\n      ref: el => this.formRef = el,\n      onUploaded: this.onUploaded.bind(this),\n      onFinish: this.submit.bind(this),\n      performer: performer,\n      submiting: updating\n    }, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }\n    }))), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 34\n        }\n      }, \"Socials\"),\n      key: \"socials\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 15\n      }\n    }, __jsx(SocialsForm, {\n      ref: el => this.formRef = el,\n      socials: performer.socials ? performer.socials : {},\n      onFinish: this.onUpdateSocials.bind(this),\n      submiting: updating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 34\n        }\n      }, \"Change password\"),\n      key: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 15\n      }\n    }, __jsx(UpdatePaswordForm, {\n      onFinish: this.updatePassword.bind(this),\n      updating: pwUpdating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 34\n        }\n      }, \"Document\"),\n      key: \"document\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 15\n      }\n    }, __jsx(PerformerDocument, {\n      update: true,\n      submiting: updating,\n      onUploaded: this.onUploaded.bind(this),\n      onFormRefSubmit: this.onFormRefSubmit.bind(this),\n      performer: performer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 34\n        }\n      }, \"Schedule\"),\n      key: \"schedule\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 15\n      }\n    }, __jsx(PerformerSchedule, {\n      scheduleValue: this.scheduleValue,\n      onChangeTime: this.onChangeTime.bind(this),\n      submiting: updating,\n      onFormRefSubmit: this.onFormRefSubmit.bind(this),\n      onChangeCloded: this.onChangeCloded.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 22\n        }\n      }, \"Commission Setting\"),\n      key: \"commission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 15\n      }\n    }, __jsx(CommissionSettingForm, {\n      submiting: settingUpdating,\n      onFinish: this.updateCommissionSetting.bind(this),\n      commissionSetting: performer.commissionSetting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }\n    })))));\n  }\n\n}\n\nexport default PerformerUpdate;","map":null,"metadata":{},"sourceType":"module"}