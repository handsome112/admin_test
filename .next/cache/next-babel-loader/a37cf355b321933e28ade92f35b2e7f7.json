{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/photos/bulk-upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment, createRef } from 'react';\nimport { Form, message, Button, Select, Col, Row, Upload } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { SelectPerformerDropdown } from '@components/performer/common/select-performer-dropdown';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { photoService } from '@services/photo.service';\nimport UploadList from '@components/file/upload-list';\nimport { SelectGalleryDropdown } from '@components/gallery/common/select-gallery-dropdown';\nimport { galleryService } from '@services/gallery.service';\nimport Router from 'next/router';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!'\n};\nconst {\n  Dragger\n} = Upload;\n\nclass BulkUploadPhoto extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      uploading: false,\n      preview: null,\n      uploadPercentage: 0,\n      fileList: [],\n      galleries: []\n    });\n\n    _defineProperty(this, \"formRef\", void 0);\n\n    _defineProperty(this, \"uploadRef\", void 0);\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  componentDidMount() {\n    if (!this.formRef) this.formRef = createRef();\n    if (!this.uploadRef) this.uploadRef = createRef();\n    this.props.performerId && this.findGalleries(this.props.performerId);\n  }\n\n  async findGalleries(performerId) {\n    const resp = await galleryService.search({\n      performerId: performerId,\n      limit: 1000\n    });\n    this.setState({\n      galleries: resp.data.data || []\n    });\n  }\n\n  setFormVal(field, val) {\n    const instance = this.formRef.current;\n    instance.setFieldsValue({\n      [field]: val\n    });\n    if (field === 'performerId') this.findGalleries(val);\n  }\n\n  async beforeUpload(file, fileList) {\n    await Promise.all(fileList.map(file => {\n      const ext = file.name.split('.').pop().toLowerCase();\n      const isImageAccept = process.env.NEXT_PUBLIC_IMAGE_ACCPET.split(',').map(item => item.trim()).indexOf(`.${ext}`);\n      const isLt2M = file.size / 1024 / 1024 < (process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2);\n\n      if (isImageAccept === -1 || !isLt2M) {\n        fileList.splice(fileList.findIndex(f => f.uid === file.uid), 1);\n      }\n    }));\n    await this.setState({\n      fileList\n    });\n    return false;\n  }\n\n  onUploading(file, resp) {\n    this.setState({\n      uploadPercentage: resp.percentage\n    });\n    file.percent = resp.percentage;\n    if (file.percent === 100) file.status = 'done';\n    this.forceUpdate();\n  }\n\n  remove(file) {\n    const fileList = this.state.fileList;\n    fileList.splice(fileList.findIndex(f => f.uid === file.uid), 1);\n    this.setState({\n      fileList\n    });\n    this.forceUpdate();\n  }\n\n  async submit(data) {\n    if (!this.state.fileList.length) {\n      return message.error('Please select photo!');\n    }\n\n    const uploadFiles = this.state.fileList.filter(f => !['uploading', 'done'].includes(f.status));\n    if (!uploadFiles.length) return message.error('Please select new file!');\n    await this.setState({\n      uploading: true\n    });\n\n    for (const file of uploadFiles) {\n      try {\n        if (['uploading', 'done'].includes(file.status)) continue;\n        file.status = 'uploading';\n        await photoService.uploadPhoto(file, data, this.onUploading.bind(this, file));\n      } catch (e) {\n        file.status = 'error';\n        message.error(`File ${file.name} error!`);\n      }\n    }\n\n    message.success('Photos has been uploaded!');\n    await this.setState({\n      uploading: false\n    }, () => window.setTimeout(() => {\n      Router.push('/photos');\n    }, 1000));\n  }\n\n  render() {\n    if (!this.formRef) this.formRef = createRef();\n    if (!this.uploadRef) this.uploadRef = createRef();\n    const {\n      uploading,\n      fileList\n    } = this.state;\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, \"Upload photo\")), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, __jsx(Form, _extends({}, layout, {\n      onFinish: this.submit.bind(this),\n      validateMessages: validateMessages,\n      ref: this.formRef,\n      initialValues: {\n        status: 'draft',\n        token: 0,\n        performerId: this.props.performerId || '',\n        galleryId: this.props.galleryId || ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }), __jsx(Form.Item, {\n      name: \"performerId\",\n      label: \"Performer\",\n      rules: [{\n        required: true\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, __jsx(SelectPerformerDropdown, {\n      onSelect: val => this.setFormVal('performerId', val),\n      disabled: uploading,\n      defaultValue: this.props.performerId || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }\n    })), __jsx(Form.Item, {\n      name: \"galleryId\",\n      label: \"Gallery\",\n      rules: [{\n        required: true,\n        message: 'Please select a gallery'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, __jsx(SelectGalleryDropdown, {\n      galleries: this.state.galleries,\n      disabled: this.state.galleries.length <= 0,\n      onSelect: val => this.setFormVal('galleryId', val),\n      defaultValue: this.props.galleryId || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    })), __jsx(Form.Item, {\n      name: \"status\",\n      label: \"Default status\",\n      rules: [{\n        required: true\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      disabled: uploading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, __jsx(Select.Option, {\n      value: \"draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, \"Draft\"), __jsx(Select.Option, {\n      key: \"active\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, \"Active\"), __jsx(Select.Option, {\n      key: \"inactive\",\n      value: \"inactive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, \"Inactive\"))), __jsx(Row, {\n      className: \"ant-form-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 4,\n      className: \"ant-form-item-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }\n    }, __jsx(\"label\", {\n      className: \"ant-form-item-required\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, \"Photos\")), __jsx(Col, {\n      span: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, __jsx(Dragger // accept={process.env.NEXT_PUBLIC_IMAGE_ACCPET || 'image/*'}\n    , {\n      beforeUpload: this.beforeUpload.bind(this),\n      multiple: true,\n      showUploadList: false,\n      disabled: uploading,\n      listType: \"picture\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 19\n      }\n    }, __jsx(\"p\", {\n      className: \"ant-upload-drag-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }\n    }, __jsx(UploadOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 23\n      }\n    })), __jsx(\"p\", {\n      className: \"ant-upload-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, \"Click or drag file to this area to upload\"), __jsx(\"p\", {\n      className: \"ant-upload-hint\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }\n    }, \"Support image file only. Image must smaller than\", ' ', process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB! Only accept \", process.env.NEXT_PUBLIC_IMAGE_ACCPET, \".\")), __jsx(UploadList, {\n      files: fileList,\n      remove: this.remove.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 19\n      }\n    })))), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: uploading,\n      disabled: uploading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }\n    }, \"Upload\")))));\n  }\n\n}\n\nexport default BulkUploadPhoto;","map":null,"metadata":{},"sourceType":"module"}