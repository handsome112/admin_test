{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/studios/update.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment, createRef } from 'react';\nimport { Tabs, message } from 'antd';\nimport Page from '@components/common/layout/page';\nimport StudioAccountForm from '@components/studio/studio-account-form';\nimport { authService, studioService } from '@services/index';\nimport Loader from '@components/common/base/loader';\nimport { utilsService } from '@services/utils.service';\nimport { UpdatePaswordForm } from '@components/user/update-password-form';\nimport { BreadcrumbComponent } from '@components/common';\nimport StudioCommissionForm from '@components/studio/studio-commission-form';\nimport { getResponseError } from '@lib/utils';\nimport { StudioDocumentForm } from '@components/studio/studio-document-form';\n\nclass PerformerUpdate extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"formRef\", createRef());\n\n    _defineProperty(this, \"state\", {\n      pwUpdating: false,\n      updating: false,\n      fetching: false,\n      studio: {},\n      settingUpdating: false\n    });\n\n    _defineProperty(this, \"_document\", void 0);\n\n    _defineProperty(this, \"customFields\", {});\n\n    _defineProperty(this, \"dates\", null);\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    const [countries] = await Promise.all([utilsService.countriesList()]);\n    return _objectSpread({\n      countries: countries.data\n    }, ctx.query);\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        fetching: true\n      });\n      const resp = await studioService.findById(this.props.id);\n      this.setState({\n        studio: resp.data\n      });\n    } catch (e) {\n      message.error('Error while fecting performer!');\n    } finally {\n      this.setState({\n        fetching: false\n      });\n    }\n  }\n\n  async submit(data) {\n    try {\n      this.setState({\n        updating: true\n      });\n      const updated = await studioService.update(this.props.id, _objectSpread(_objectSpread({}, data), this.customFields));\n      this.setState({\n        performer: updated.data\n      });\n      message.success('Updated successfully');\n    } catch (e) {\n      // TODO - exact error message\n      message.error('An error occurred, please try again!');\n    } finally {\n      this.setState({\n        updating: false\n      });\n    }\n  }\n\n  async updatePassword(data) {\n    try {\n      this.setState({\n        pwUpdating: true\n      });\n      await authService.updatePassword(data.password, this.props.id, 'studio');\n      message.success('Password has been updated!');\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err) || 'An error occurred, please try again!');\n    } finally {\n      this.setState({\n        pwUpdating: false\n      });\n    }\n  }\n\n  onUploaded(field, resp) {\n    this.customFields[field] = resp.response.data._id;\n  }\n\n  onBeforeUpload(file) {\n    this._document = file;\n  }\n\n  onFormRefSubmit() {\n    this.formRef.formRefSubmit();\n  }\n\n  async updateCommissionSetting(data) {\n    try {\n      this.setState({\n        settingUpdating: true\n      });\n      await studioService.updateStudioCommission(this.props.id, _objectSpread(_objectSpread({}, data), {}, {\n        studioId: this.props.id\n      }));\n      message.success('Commission setting has been updated!');\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err) || 'An error occurred, please try again!');\n    } finally {\n      this.setState({\n        settingUpdating: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      pwUpdating,\n      studio,\n      updating,\n      fetching,\n      settingUpdating\n    } = this.state;\n    const {\n      countries\n    } = this.props;\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, \"Studio update\")), __jsx(BreadcrumbComponent, {\n      breadcrumbs: [{\n        title: 'Studios',\n        href: '/studios'\n      }, {\n        title: studio.username\n      }, {\n        title: 'Update'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, fetching ? __jsx(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }) : studio ? __jsx(Tabs, {\n      defaultActiveKey: \"basic\",\n      tabPosition: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 34\n        }\n      }, \"General info\"),\n      key: \"basic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, __jsx(StudioAccountForm, {\n      ref: el => this.formRef = el,\n      onFinish: this.submit.bind(this),\n      studio: studio,\n      submiting: updating,\n      countries: countries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 34\n        }\n      }, \"Change password\"),\n      key: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, __jsx(UpdatePaswordForm, {\n      onFinish: this.updatePassword.bind(this),\n      updating: pwUpdating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 22\n        }\n      }, \"Commission Setting\"),\n      key: \"commission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, __jsx(StudioCommissionForm, {\n      submiting: settingUpdating,\n      onFinish: this.updateCommissionSetting.bind(this),\n      commission: studio.commission,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 34\n        }\n      }, \"Document\"),\n      key: \"document\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, __jsx(StudioDocumentForm, {\n      submiting: updating,\n      onUploaded: this.onUploaded.bind(this),\n      studio: studio,\n      method: \"PUT\" // beforeUpload={this.onBeforeUpload.bind(this)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }))) : __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, \"Studio not found!\")));\n  }\n\n}\n\nexport default PerformerUpdate;","map":null,"metadata":{},"sourceType":"module"}