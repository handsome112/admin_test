{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/account/settings.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { PureComponent, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Tabs, message } from 'antd';\nimport Page from '@components/common/layout/page';\nimport { AccountForm } from '@components/user/account-form';\nimport { updateUser, updateCurrentUserAvatar } from 'src/redux/user/actions';\nimport { authService, userService } from '@services/index';\nimport { UpdatePaswordForm } from '@components/user/update-password-form';\nimport { utilsService } from '@services/utils.service';\n\nclass AccountSettings extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      pwUpdating: false\n    });\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    const resp = await utilsService.countriesList();\n    return _objectSpread({\n      countries: resp.data\n    }, ctx.query);\n  }\n\n  submit(data) {\n    this.props.updateUser(data); // TODO - show alert success for update?\n    // or move to sagas\n  }\n\n  onAvatarUploaded(data) {\n    message.success('Avatar has been updated!');\n    this.props.updateCurrentUserAvatar(data.base64);\n  }\n\n  async updatePassword(data) {\n    try {\n      this.setState({\n        pwUpdating: true\n      });\n      await authService.updatePassword(data.password);\n      message.success('Password has been updated!');\n    } catch (e) {\n      message.error('An error occurred, please try again!');\n    } finally {\n      this.setState({\n        pwUpdating: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.updateSuccess !== this.props.updateSuccess && this.props.updateSuccess) {\n      message.success('Updated successfully!');\n    }\n  }\n\n  render() {\n    const {\n      currentUser,\n      updating,\n      countries\n    } = this.props;\n    const {\n      pwUpdating\n    } = this.state;\n    const uploadHeaders = {\n      authorization: authService.getToken()\n    };\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Account Settings\")), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, __jsx(Tabs, {\n      defaultActiveKey: \"basic\",\n      tabPosition: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 32\n        }\n      }, \"Basic info\"),\n      key: \"basic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, __jsx(AccountForm, {\n      onFinish: this.submit.bind(this),\n      user: currentUser,\n      updating: updating,\n      options: {\n        uploadHeaders,\n        avatarUploadUrl: userService.getAvatarUploadUrl(),\n        onAvatarUploaded: this.onAvatarUploaded.bind(this)\n      },\n      countries: countries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 32\n        }\n      }, \"Change password\"),\n      key: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, __jsx(UpdatePaswordForm, {\n      onFinish: this.updatePassword.bind(this),\n      updating: pwUpdating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nconst mapStates = state => ({\n  currentUser: state.user.current,\n  updating: state.user.updating,\n  updateSuccess: state.user.updateSuccess\n});\n\nconst mapDispatch = {\n  updateUser,\n  updateCurrentUserAvatar\n};\nexport default connect(mapStates, mapDispatch)(AccountSettings);","map":null,"metadata":{},"sourceType":"module"}