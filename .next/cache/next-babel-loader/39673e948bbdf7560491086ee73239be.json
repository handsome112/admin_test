{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/pages/earning/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, DatePicker, Space, Statistic, PageHeader, message } from 'antd';\nimport Head from 'next/head';\nimport { PureComponent } from 'react';\nimport Page from '@components/common/layout/page'; // import { SearchFilter } from '@components/common/search-filter';\n\nimport EarningTable from 'src/components/earning/table-list';\nimport { earningService } from 'src/services';\nimport { getResponseError } from 'src/lib/utils';\nimport { connect } from 'react-redux';\nimport { SearchFilter } from '@components/common/search-filter';\nimport './earning.less';\n\nclass EarningPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      offset: 0,\n      data: [],\n      loading: false,\n      pagination: {\n        pageSize: 10,\n        total: 0\n      },\n      filter: {},\n      sort: {\n        sortBy: 'createdAt',\n        sorter: 'asc'\n      },\n      stats: null,\n      target: 'performer'\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n    this.loadStats();\n  }\n\n  async loadData() {\n    const {\n      offset,\n      pagination,\n      filter,\n      sort,\n      query,\n      target\n    } = this.state; // var query = {};\n    // if (fromDate && toDate) {\n    //   query = Object.assign(query, fromDate, toDate);\n    // }\n\n    try {\n      await this.setState({\n        loading: true\n      });\n      const resp = await earningService.search(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n        offset,\n        limit: pagination.pageSize\n      }, filter), sort), query), {}, {\n        target\n      }));\n      await this.setState({\n        data: resp.data.data,\n        pagination: _objectSpread(_objectSpread({}, this.state.pagination), {}, {\n          total: resp.data.total\n        })\n      });\n    } catch (e) {\n      this.showError(e);\n    } finally {\n      await this.setState({\n        loading: false\n      });\n    }\n  }\n\n  async loadStats() {\n    const {\n      query,\n      target,\n      filter\n    } = this.state;\n\n    try {\n      const resp = await earningService.stats(_objectSpread(_objectSpread({}, query), {}, {\n        target,\n        filter\n      }));\n      await this.setState({\n        stats: resp\n      });\n    } catch (error) {\n      this.showError(error);\n    }\n  }\n\n  async onHandleTabChange(pagination, filters, sorter) {\n    const {\n      sort\n    } = this.state;\n    await this.setState({\n      offset: (pagination.current - 1) * this.state.pagination.pageSize,\n      sort: _objectSpread(_objectSpread({}, sort), {}, {\n        sortBy: sorter.field,\n        sorter: sorter.order === 'ascend' ? 'asc' : 'desc'\n      })\n    });\n    this.loadData();\n  }\n\n  async handleFilter(filter) {\n    await this.setState({\n      filter\n    });\n    this.loadData();\n    this.loadStats();\n  }\n\n  async setDateRanger(_, dateStrings) {\n    if (!dateStrings[0] && !dateStrings[1]) {\n      await this.setState({\n        query: {},\n        sort: {\n          sortBy: 'createdAt',\n          sorter: 'desc'\n        }\n      });\n      this.loadData();\n      this.loadStats();\n    }\n\n    if (dateStrings[0] && dateStrings[1]) {\n      await this.setState({\n        query: {\n          fromDate: dateStrings[0],\n          toDate: dateStrings[1]\n        }\n      });\n      this.loadData();\n      this.loadStats();\n    } else {\n      return;\n    }\n  }\n\n  async showError(e) {\n    const err = await Promise.resolve(e);\n    message.error(getResponseError(err));\n  }\n\n  render() {\n    const {\n      data,\n      loading,\n      pagination,\n      stats\n    } = this.state;\n    const {\n      conversionRate\n    } = this.props; // const sourceType = [\n    //   { key: '', text: 'All' },\n    //   { text: 'Sale Video', key: 'sale_video' },\n    //   { text: 'Sale Product', key: 'sale_product' },\n    //   { text: 'Sale Photo', key: 'sale_photo' },\n    //   { text: 'Tip', key: 'tip' },\n    //   { text: 'Private', key: 'private' },\n    //   { text: 'Group', key: 'group' }\n    // ];\n\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, \"Earning\")), __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"Model Earning\",\n      style: {\n        padding: 0,\n        marginBottom: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }), __jsx(Row, {\n      className: \"ant-page-header\",\n      style: {\n        padding: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      md: 12,\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }, __jsx(DatePicker.RangePicker, {\n      disabledDate: () => loading,\n      onCalendarChange: this.setDateRanger.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }))), __jsx(Col, {\n      md: 12,\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, !loading && stats && __jsx(Space, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"space-display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 19\n      }\n    }, __jsx(Statistic, {\n      className: \"space-custom\",\n      title: \"Paid Tokens\",\n      value: stats.data.paidPrice,\n      style: {\n        marginRight: '30px'\n      },\n      precision: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 19\n      }\n    }), __jsx(Statistic, {\n      style: {\n        marginRight: '30px'\n      },\n      title: \"Remaining Tokens\",\n      value: stats.data.remainingPrice,\n      precision: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 19\n      }\n    }), __jsx(Statistic, {\n      style: {\n        marginRight: '30px'\n      },\n      title: \"Total Tokens\",\n      value: stats.data.totalPrice,\n      precision: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }\n    }), __jsx(Statistic, {\n      style: {\n        marginRight: '30px'\n      },\n      title: \"Current Conversion Rate\",\n      value: conversionRate || 'N/A',\n      precision: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 19\n      }\n    }))))), __jsx(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    }), data ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }\n    }, __jsx(SearchFilter, {\n      onSubmit: this.handleFilter.bind(this),\n      notWithKeyWord: true,\n      searchWithPerformer: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }\n    }), __jsx(EarningTable, {\n      dataSource: data,\n      rowKey: \"_id\",\n      onChange: this.onHandleTabChange.bind(this),\n      pagination: pagination,\n      loading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    })) : __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }, \"There are no earning at this time.\")));\n  }\n\n}\n\nconst mapStateToProps = state => _objectSpread({}, state.settings);\n\nexport default connect(mapStateToProps)(EarningPage);","map":null,"metadata":{},"sourceType":"module"}