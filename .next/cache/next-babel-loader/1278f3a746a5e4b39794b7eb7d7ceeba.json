{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/var/www/admin.dtest.live/src/components/performer/commission-setting.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent } from 'react';\nimport { Form, Button, message, InputNumber } from 'antd';\nvar layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nvar validateMessages = {\n  required: 'This field is required!'\n};\nexport var CommissionSettingForm = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CommissionSettingForm, _PureComponent);\n\n  var _super = _createSuper(CommissionSettingForm);\n\n  function CommissionSettingForm() {\n    _classCallCheck(this, CommissionSettingForm);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CommissionSettingForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          commissionSetting = _this$props.commissionSetting,\n          onFinish = _this$props.onFinish,\n          submiting = _this$props.submiting;\n      return __jsx(Form, {\n        layout: 'vertical',\n        name: \"form-performer-commission\",\n        onFinish: onFinish.bind(this),\n        onFinishFailed: function onFinishFailed() {\n          return message.error('Please complete the required fields.');\n        },\n        validateMessages: validateMessages,\n        initialValues: commissionSetting ? commissionSetting : {\n          tipCommission: 20,\n          privateCallCommission: 20,\n          groupCallCommission: 20,\n          productCommission: 20,\n          albumCommission: 20,\n          videoCommission: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 7\n        }\n      }, __jsx(Form.Item, {\n        name: \"tipCommission\",\n        label: \"Tip Commission\",\n        rules: [{\n          validator: function validator(_, value) {\n            if (parseInt(value) > 0 && parseInt(value) < 100) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject('Value must be greater than 0 and less than 100');\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, __jsx(InputNumber, {\n        min: 1,\n        max: 99,\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"privateCallCommission\",\n        label: \"Private Call Commission\",\n        rules: [{\n          validator: function validator(_, value) {\n            if (parseInt(value) > 0 && parseInt(value) < 100) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject('Value must be greater than 0 and less than 100');\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, __jsx(InputNumber, {\n        min: 1,\n        max: 99,\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"groupCallCommission\",\n        label: \"Group Call Commission\",\n        rules: [{\n          validator: function validator(_, value) {\n            if (parseInt(value) > 0 && parseInt(value) < 100) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject('Value must be greater than 0 and less than 100');\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, __jsx(InputNumber, {\n        min: 1,\n        max: 99,\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"productCommission\",\n        label: \"Product Sale Commission\",\n        rules: [{\n          validator: function validator(_, value) {\n            if (parseInt(value) > 0 && parseInt(value) < 100) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject('Value must be greater than 0 and less than 100');\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, __jsx(InputNumber, {\n        min: 1,\n        max: 99,\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"albumCommission\",\n        label: \"Album Sale Commission\",\n        rules: [{\n          validator: function validator(_, value) {\n            if (parseInt(value) > 0 && parseInt(value) < 100) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject('Value must be greater than 0 and less than 100');\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, __jsx(InputNumber, {\n        min: 1,\n        max: 99,\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        name: \"videoCommission\",\n        label: \"Video Sale Commission\",\n        rules: [{\n          validator: function validator(_, value) {\n            if (parseInt(value) > 0 && parseInt(value) < 100) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject('Value must be greater than 0 and less than 100');\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }, __jsx(InputNumber, {\n        min: 1,\n        max: 99,\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      })), __jsx(Form.Item, {\n        wrapperCol: _objectSpread({}, layout.wrapperCol),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }, __jsx(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: submiting,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }\n      }, \"Submit\")));\n    }\n  }]);\n\n  return CommissionSettingForm;\n}(PureComponent);","map":null,"metadata":{},"sourceType":"module"}