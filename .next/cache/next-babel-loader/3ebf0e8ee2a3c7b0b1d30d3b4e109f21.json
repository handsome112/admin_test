{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/admin.dtest.live/src/components/file/sound-upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Upload, message, Button } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\n\nfunction getBase64(img, callback) {\n  var reader = new FileReader();\n  reader.addEventListener('load', function () {\n    return callback(reader.result);\n  });\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  var isLt2M = file.size / 1024 / 1024 < (process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_SOUND || 2);\n\n  if (!isLt2M) {\n    message.error(\"Image must smaller than \".concat(process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 2, \"MB!\"));\n  }\n\n  return isLt2M;\n}\n\nvar SoundUpload = /*#__PURE__*/function (_PureComponent) {\n  _inherits(SoundUpload, _PureComponent);\n\n  var _super = _createSuper(SoundUpload);\n\n  function SoundUpload(props) {\n    var _this;\n\n    _classCallCheck(this, SoundUpload);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (info) {\n      var onUploaded = _this.props.onUploaded;\n\n      if (info.file.status === 'uploading') {\n        _this.setState({\n          loading: true\n        });\n      }\n\n      if (info.file.status === 'done') {\n        _this.setState({\n          loading: false\n        });\n      }\n\n      var fileList = _toConsumableArray(info.fileList);\n\n      fileList = fileList.slice(-1);\n      fileList = fileList.map(function (file) {\n        if (file.response) {\n          var data = file.response.data;\n          file.url = data.url;\n          file.uid = data._id;\n          file.name = data.name;\n          file.status = 'done';\n          onUploaded && onUploaded({\n            response: info.file.response\n          });\n\n          _this.setState({\n            loading: false\n          });\n        }\n\n        return file;\n      });\n\n      _this.setState({\n        fileList: fileList\n      });\n    });\n\n    _this.state = {\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(SoundUpload, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fileUrl = this.props.fileUrl;\n\n      if (fileUrl) {\n        this.setState({\n          fileList: [{\n            uid: '-1',\n            name: fileUrl,\n            status: 'done',\n            url: fileUrl\n          }]\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$options = this.props.options,\n          options = _this$props$options === void 0 ? {} : _this$props$options;\n      var _this$state = this.state,\n          fileList = _this$state.fileList,\n          loading = _this$state.loading;\n      var _this$props = this.props,\n          headers = _this$props.headers,\n          uploadUrl = _this$props.uploadUrl;\n\n      var UploadButton = function UploadButton() {\n        return __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 7\n          }\n        }, __jsx(Button, {\n          type: \"primary\",\n          loading: loading,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }\n        }, __jsx(PlusOutlined, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }\n        }), \" Upload\"));\n      };\n\n      return __jsx(Upload, {\n        name: options.fieldName || 'file',\n        showUploadList: {\n          showPreviewIcon: true,\n          showRemoveIcon: false,\n          showDownloadIcon: false\n        },\n        fileList: fileList,\n        multiple: false,\n        listType: \"text\",\n        className: \"avatar-uploader\",\n        action: uploadUrl,\n        beforeUpload: beforeUpload,\n        onChange: this.handleChange,\n        headers: headers,\n        accept: process.env.NEXT_PUBLIC_SOUND_ACCEPT,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, __jsx(UploadButton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return SoundUpload;\n}(PureComponent);\n\nexport { SoundUpload as default };","map":null,"metadata":{},"sourceType":"module"}