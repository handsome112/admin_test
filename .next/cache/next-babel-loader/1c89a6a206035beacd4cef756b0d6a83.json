{"ast":null,"code":"var _jsxFileName = \"/var/www/admin.dtest.live/src/components/banner/form-upload-banner.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { PureComponent, createRef } from 'react';\nimport { Form, Input, Select, Upload, Button, message, Progress } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { ThumbnailBanner } from '@components/banner/thumbnail-banner';\nimport TextArea from 'antd/lib/input/TextArea';\nconst layout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!'\n};\nexport class FormUploadBanner extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      preview: null,\n      type: 'img'\n    });\n\n    _defineProperty(this, \"formRef\", void 0);\n  }\n\n  componentDidMount() {\n    var _this$props$banner, _this$props$banner2;\n\n    if (!this.formRef) this.formRef = createRef();\n\n    if (((_this$props$banner = this.props.banner) === null || _this$props$banner === void 0 ? void 0 : _this$props$banner.type) == 'img') {\n      this.setState({\n        type: 'img'\n      });\n    } else if (((_this$props$banner2 = this.props.banner) === null || _this$props$banner2 === void 0 ? void 0 : _this$props$banner2.type) == 'html') {\n      this.setState({\n        type: 'html'\n      });\n    }\n  }\n\n  setFormVal(field, val) {\n    const instance = this.formRef.current;\n    instance.setFieldsValue({\n      [field]: val\n    });\n  }\n\n  beforeUpload(file) {\n    const {\n      beforeUpload: handleUpload\n    } = this.props;\n    const isMaxSize = file.size / 1024 / 1024 < (process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 10);\n\n    if (!isMaxSize) {\n      message.error(`Image must be smaller than ${process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 10}MB!`);\n      return false;\n    }\n\n    const reader = new FileReader();\n    reader.addEventListener('load', () => this.setState({\n      preview: reader.result\n    }));\n    reader.readAsDataURL(file);\n    handleUpload(file);\n    return false;\n  }\n\n  onSelect(type) {\n    this.setState({\n      type\n    });\n  }\n\n  render() {\n    if (!this.formRef) this.formRef = createRef();\n    const {\n      banner,\n      submit,\n      uploading,\n      uploadPercentage\n    } = this.props;\n    const {\n      preview,\n      type\n    } = this.state;\n    const haveBanner = !!banner;\n    return __jsx(Form, _extends({}, layout, {\n      onFinish: submit && submit.bind(this),\n      onFinishFailed: () => message.error('Please complete the required fields'),\n      name: \"form-upload-banner\",\n      ref: this.formRef,\n      validateMessages: validateMessages,\n      initialValues: banner || {\n        title: '',\n        description: '',\n        href: '',\n        status: 'active',\n        position: 'top',\n        type: 'img'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }), __jsx(Form.Item, {\n      name: \"title\",\n      rules: [{\n        required: true,\n        message: 'Please input title of banner!'\n      }],\n      label: \"Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      placeholder: \"Enter banner title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"position\",\n      label: \"Position\",\n      rules: [{\n        required: true,\n        message: 'Please select position!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, __jsx(Select.Option, {\n      key: \"top\",\n      value: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"Top\"), __jsx(Select.Option, {\n      key: \"bottom\",\n      value: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"Bottom\"), __jsx(Select.Option, {\n      key: \"right\",\n      value: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"Right\"))), __jsx(Form.Item, {\n      name: \"href\",\n      label: \"Link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      type: \"url\",\n      placeholder: \"Enter banner link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 45\n      }\n    })), __jsx(Form.Item, {\n      name: \"description\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, __jsx(Input.TextArea, {\n      rows: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    })), __jsx(Form.Item, {\n      name: \"status\",\n      label: \"Status\",\n      rules: [{\n        required: true,\n        message: 'Please select status!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, __jsx(Select.Option, {\n      key: \"active\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, \"Active\"), __jsx(Select.Option, {\n      key: \"inactive\",\n      value: \"inactive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, \"Inactive\"))), __jsx(Form.Item, {\n      name: \"type\",\n      label: \"Type\",\n      rules: [{\n        required: true,\n        message: 'Please select type for banner!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      onSelect: this.onSelect.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    }, __jsx(Select.Option, {\n      key: \"img\",\n      value: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, \"Image\"), __jsx(Select.Option, {\n      key: \"html\",\n      value: \"html\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, \"HTML\"))), type == 'html' && __jsx(Form.Item, {\n      name: \"contentHTML\",\n      label: \"HTML\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, __jsx(TextArea, {\n      rows: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    })), __jsx(React.Fragment, null, type == 'img' && __jsx(\"div\", {\n      key: \"thumbnail\",\n      className: \"ant-row ant-form-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"ant-col ant-col-4 ant-form-item-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, \"Banner \")), __jsx(\"div\", {\n      className: \"ant-col ant-col-16 ant-form-item-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, \"Ratio dimension 4:1 (eg: 1600px:400px)\"), !haveBanner ? __jsx(React.Fragment, null, __jsx(Upload, {\n      accept: 'image/*',\n      multiple: false,\n      showUploadList: false,\n      disabled: uploading || haveBanner,\n      beforeUpload: file => this.beforeUpload(file),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, preview ? __jsx(\"img\", {\n      src: preview,\n      alt: \"file\",\n      style: {\n        width: '250px',\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }) : null, __jsx(\"div\", {\n      style: {\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 23\n      }\n    }), !haveBanner && __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 25\n      }\n    }, __jsx(UploadOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 27\n      }\n    }), \" Select File\")), uploadPercentage ? __jsx(Progress, {\n      percent: uploadPercentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 23\n      }\n    }) : null) : __jsx(ThumbnailBanner, {\n      banner: banner,\n      style: {\n        width: '250px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 19\n      }\n    }), __jsx(\"div\", {\n      className: \"ant-form-item-explain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, \"Image must smaller than \", process.env.NEXT_PUBLIC_MAXIMUM_SIZE_UPLOAD_IMAGE || 10, \" MB!\"))))), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: uploading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }\n    }, haveBanner ? 'Update' : 'Upload')));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}